{"ast":null,"code":"import { HandlebarHelpersEnum } from './handlebarHelpers';\nimport { TemplateVariableTypeEnum } from '../../types';\nexport function getTemplateVariables(bod) {\n  const stringVariables = bod.filter(body => body.type === 'MustacheStatement').flatMap(body => {\n    var _a, _b, _c;\n\n    const varName = ((_a = body.params[0]) === null || _a === void 0 ? void 0 : _a.original) || body.path.original;\n\n    if (!shouldAddVariable(varName)) {\n      return [];\n    }\n\n    if ((_b = body.params[0]) === null || _b === void 0 ? void 0 : _b.original) {\n      if (!Object.values(HandlebarHelpersEnum).includes(body.path.original)) {\n        return [];\n      }\n    }\n\n    return {\n      type: TemplateVariableTypeEnum.STRING,\n      name: ((_c = body.params[0]) === null || _c === void 0 ? void 0 : _c.original) || body.path.original,\n      defaultValue: '',\n      required: false\n    };\n  });\n  const arrayVariables = bod.filter(body => body.type === 'BlockStatement' && ['each', 'with'].includes(body.path.original)).flatMap(body => {\n    var _a;\n\n    const varName = ((_a = body.params[0]) === null || _a === void 0 ? void 0 : _a.original) || body.path.original;\n\n    if (!shouldAddVariable(varName)) {\n      return [];\n    }\n\n    const nestedVariablesInBlock = getTemplateVariables(body.program.body).map(mustVar => {\n      return Object.assign(Object.assign({}, mustVar), {\n        name: `${varName}.${mustVar.name}`\n      });\n    });\n\n    if (['with'].includes(body.path.original)) {\n      return [...nestedVariablesInBlock];\n    }\n\n    return [{\n      type: TemplateVariableTypeEnum.ARRAY,\n      name: varName,\n      required: false\n    }, ...nestedVariablesInBlock];\n  });\n  const boolVariables = bod.filter(body => body.type === 'BlockStatement' && ['if', 'unless'].includes(body.path.original)).flatMap(body => {\n    var _a;\n\n    const varName = ((_a = body.params[0]) === null || _a === void 0 ? void 0 : _a.original) || body.path.original;\n\n    if (!shouldAddVariable(varName)) {\n      return [];\n    }\n\n    if (body.params.length > 1) {\n      return [];\n    }\n\n    const nestedVariablesInBlock = getTemplateVariables(body.program.body);\n    return [{\n      type: TemplateVariableTypeEnum.BOOLEAN,\n      name: varName,\n      defaultValue: true,\n      required: false\n    }, ...nestedVariablesInBlock];\n  });\n  return stringVariables.concat(arrayVariables).concat(boolVariables);\n}\n\nconst shouldAddVariable = variableName => {\n  const validRegExp = /^[a-zA-Z_][a-zA-Z0-9_-]*?/;\n  const isValid = variableName.match(validRegExp);\n  return isValid;\n};","map":{"version":3,"names":["HandlebarHelpersEnum","TemplateVariableTypeEnum","getTemplateVariables","bod","stringVariables","filter","body","type","flatMap","_a","_b","_c","varName","params","original","path","shouldAddVariable","Object","values","includes","STRING","name","defaultValue","required","arrayVariables","nestedVariablesInBlock","program","map","mustVar","assign","ARRAY","boolVariables","length","BOOLEAN","concat","variableName","validRegExp","isValid","match"],"sources":["D:/forum-system-with-react-novu-node/client/node_modules/@novu/shared/dist/esm/consts/handlebar-helpers/getTemplateVariables.js"],"sourcesContent":["import { HandlebarHelpersEnum } from './handlebarHelpers';\nimport { TemplateVariableTypeEnum } from '../../types';\nexport function getTemplateVariables(bod) {\n    const stringVariables = bod\n        .filter((body) => body.type === 'MustacheStatement')\n        .flatMap((body) => {\n        var _a, _b, _c;\n        const varName = ((_a = body.params[0]) === null || _a === void 0 ? void 0 : _a.original) || body.path.original;\n        if (!shouldAddVariable(varName)) {\n            return [];\n        }\n        if ((_b = body.params[0]) === null || _b === void 0 ? void 0 : _b.original) {\n            if (!Object.values(HandlebarHelpersEnum).includes(body.path.original)) {\n                return [];\n            }\n        }\n        return {\n            type: TemplateVariableTypeEnum.STRING,\n            name: ((_c = body.params[0]) === null || _c === void 0 ? void 0 : _c.original) || body.path.original,\n            defaultValue: '',\n            required: false,\n        };\n    });\n    const arrayVariables = bod\n        .filter((body) => body.type === 'BlockStatement' && ['each', 'with'].includes(body.path.original))\n        .flatMap((body) => {\n        var _a;\n        const varName = ((_a = body.params[0]) === null || _a === void 0 ? void 0 : _a.original) || body.path.original;\n        if (!shouldAddVariable(varName)) {\n            return [];\n        }\n        const nestedVariablesInBlock = getTemplateVariables(body.program.body).map((mustVar) => {\n            return Object.assign(Object.assign({}, mustVar), { name: `${varName}.${mustVar.name}` });\n        });\n        if (['with'].includes(body.path.original)) {\n            return [...nestedVariablesInBlock];\n        }\n        return [\n            {\n                type: TemplateVariableTypeEnum.ARRAY,\n                name: varName,\n                required: false,\n            },\n            ...nestedVariablesInBlock,\n        ];\n    });\n    const boolVariables = bod\n        .filter((body) => body.type === 'BlockStatement' && ['if', 'unless'].includes(body.path.original))\n        .flatMap((body) => {\n        var _a;\n        const varName = ((_a = body.params[0]) === null || _a === void 0 ? void 0 : _a.original) || body.path.original;\n        if (!shouldAddVariable(varName)) {\n            return [];\n        }\n        if (body.params.length > 1) {\n            return [];\n        }\n        const nestedVariablesInBlock = getTemplateVariables(body.program.body);\n        return [\n            {\n                type: TemplateVariableTypeEnum.BOOLEAN,\n                name: varName,\n                defaultValue: true,\n                required: false,\n            },\n            ...nestedVariablesInBlock,\n        ];\n    });\n    return stringVariables.concat(arrayVariables).concat(boolVariables);\n}\nconst shouldAddVariable = (variableName) => {\n    const validRegExp = /^[a-zA-Z_][a-zA-Z0-9_-]*?/;\n    const isValid = variableName.match(validRegExp);\n    return isValid;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}