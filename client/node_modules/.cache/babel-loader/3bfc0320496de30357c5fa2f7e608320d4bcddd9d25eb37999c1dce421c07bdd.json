{"ast":null,"code":"var _jsxFileName = \"D:\\\\forum-system-with-react-node_edited_crashed\\\\client\\\\src\\\\components\\\\Replies.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Replies = () => {\n  _s();\n  const [thread, setThread] = useState(null);\n  const [replyList, setReplyList] = useState([]);\n  const [reply, setReply] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const addReply = () => {\n    fetch(`http://localhost:4000/api/add/reply/${id}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        replyText: reply,\n        userId: localStorage.getItem(\"_id\")\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        throw new Error(\"Failed to add reply\");\n      }\n    }).then(data => {\n      if (data.message === \"Reply added successfully!\") {\n        const newReply = {\n          _id: data.reply._id,\n          text: reply,\n          name: \"User\"\n        };\n        setReplyList(prevReplyList => [...prevReplyList, newReply]);\n        alert(data.message);\n        navigate(\"/dashboard\"); // Navigate to the main page after successful reply submission\n      } else {\n        alert(data.message); // Display the error message\n      }\n    }).catch(err => console.error(err));\n  };\n  const handleSubmitReply = e => {\n    e.preventDefault();\n    addReply();\n    setReply(\"\");\n  };\n  useEffect(() => {\n    const fetchThread = () => {\n      setIsLoading(true);\n      fetch(\"http://localhost:4000/api/all/threads\").then(res => res.json()).then(data => {\n        const selectedThread = data.threads.find(t => t.id === id);\n        if (selectedThread) {\n          setThread(selectedThread);\n          setReplyList(selectedThread.replies);\n          setTitle(selectedThread.title);\n        } else {\n          setTitle(\"Thread not found\");\n        }\n      }).catch(err => console.error(err)).finally(() => setIsLoading(false));\n    };\n    fetchThread();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"replies\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"repliesTitle\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this) : thread && /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"modal__content\",\n      onSubmit: handleSubmitReply,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"reply\",\n        children: \"Reply to the thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: 5,\n        value: reply,\n        onChange: e => setReply(e.target.value),\n        type: \"text\",\n        name: \"reply\",\n        className: \"modalInput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"modalBtn\",\n        children: \"SEND\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thread__container\",\n      children: replyList.map(reply => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"thread__item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: reply.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"react__container\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              opacity: \"0.5\"\n            },\n            children: [\"by \", reply.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, reply._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(Replies, \"9tQhrg6yAGTLqkraFFIyRrDCYVU=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = Replies;\nexport default Replies;\nvar _c;\n$RefreshReg$(_c, \"Replies\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","jsxDEV","_jsxDEV","Replies","_s","thread","setThread","replyList","setReplyList","reply","setReply","title","setTitle","isLoading","setIsLoading","navigate","id","addReply","fetch","method","body","JSON","stringify","replyText","userId","localStorage","getItem","headers","then","res","ok","json","Error","data","message","newReply","_id","text","name","prevReplyList","alert","catch","err","console","error","handleSubmitReply","e","preventDefault","fetchThread","selectedThread","threads","find","t","replies","finally","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","rows","value","onChange","target","type","map","style","opacity","_c","$RefreshReg$"],"sources":["D:/forum-system-with-react-node_edited_crashed/client/src/components/Replies.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nconst Replies = () => {\n  const [thread, setThread] = useState(null);\n  const [replyList, setReplyList] = useState([]);\n  const [reply, setReply] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n  const { id } = useParams();\n\n  const addReply = () => {\n    fetch(`http://localhost:4000/api/add/reply/${id}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        replyText: reply,\n        userId: localStorage.getItem(\"_id\"),\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          throw new Error(\"Failed to add reply\");\n        }\n      })\n      .then((data) => {\n        if (data.message === \"Reply added successfully!\") {\n          const newReply = {\n            _id: data.reply._id,\n            text: reply,\n            name: \"User\",\n          };\n          setReplyList((prevReplyList) => [...prevReplyList, newReply]);\n          alert(data.message);\n          navigate(\"/dashboard\"); // Navigate to the main page after successful reply submission\n        } else {\n          alert(data.message); // Display the error message\n        }\n      })\n      .catch((err) => console.error(err));\n  };\n\n  const handleSubmitReply = (e) => {\n    e.preventDefault();\n    addReply();\n    setReply(\"\");\n  };\n\n  useEffect(() => {\n    const fetchThread = () => {\n      setIsLoading(true);\n\n      fetch(\"http://localhost:4000/api/all/threads\")\n        .then((res) => res.json())\n        .then((data) => {\n          const selectedThread = data.threads.find((t) => t.id === id);\n          if (selectedThread) {\n            setThread(selectedThread);\n            setReplyList(selectedThread.replies);\n            setTitle(selectedThread.title);\n          } else {\n            setTitle(\"Thread not found\");\n          }\n        })\n        .catch((err) => console.error(err))\n        .finally(() => setIsLoading(false));\n    };\n\n    fetchThread();\n  }, [id]);\n\n  return (\n    <main className=\"replies\">\n      <h1 className=\"repliesTitle\">{title}</h1>\n\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        thread && (\n          <form className=\"modal__content\" onSubmit={handleSubmitReply}>\n            <label htmlFor=\"reply\">Reply to the thread</label>\n            <textarea\n              rows={5}\n              value={reply}\n              onChange={(e) => setReply(e.target.value)}\n              type=\"text\"\n              name=\"reply\"\n              className=\"modalInput\"\n            />\n\n            <button className=\"modalBtn\">SEND</button>\n          </form>\n        )\n      )}\n\n      <div className=\"thread__container\">\n        {replyList.map((reply) => (\n          <div className=\"thread__item\" key={reply._id}>\n            <p>{reply.text}</p>\n            <div className=\"react__container\">\n              <p style={{ opacity: \"0.5\" }}>by {reply.name}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </main>\n  );\n};\n\nexport default Replies;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}