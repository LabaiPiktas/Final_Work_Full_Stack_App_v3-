{"ast":null,"code":"function getSortedKeys(value, theme) {\n  const sorted = Object.keys(value).filter(breakpoint => breakpoint !== \"base\").sort((a, b) => theme.fn.size({\n    size: a,\n    sizes: theme.breakpoints\n  }) - theme.fn.size({\n    size: b,\n    sizes: theme.breakpoints\n  }));\n  return \"base\" in value ? [\"base\", ...sorted] : sorted;\n}\n\nfunction getResponsiveValue(_ref) {\n  let {\n    value,\n    theme,\n    getValue,\n    property\n  } = _ref;\n\n  if (value == null) {\n    return void 0;\n  }\n\n  if (typeof value === \"object\") {\n    const result = getSortedKeys(value, theme).reduce((acc, breakpointKey) => {\n      if (breakpointKey === \"base\" && value.base !== void 0) {\n        const baseValue = getValue(value.base, theme);\n\n        if (Array.isArray(property)) {\n          property.forEach(prop => {\n            acc[prop] = baseValue;\n          });\n          return acc;\n        }\n\n        acc[property] = baseValue;\n        return acc;\n      }\n\n      const breakpointValue = getValue(value[breakpointKey], theme);\n\n      if (Array.isArray(property)) {\n        acc[theme.fn.largerThan(breakpointKey)] = {};\n        property.forEach(prop => {\n          acc[theme.fn.largerThan(breakpointKey)][prop] = breakpointValue;\n        });\n        return acc;\n      }\n\n      acc[theme.fn.largerThan(breakpointKey)] = {\n        [property]: breakpointValue\n      };\n      return acc;\n    }, {});\n    return result;\n  }\n\n  const cssValue = getValue(value, theme);\n\n  if (Array.isArray(property)) {\n    return property.reduce((acc, prop) => {\n      acc[prop] = cssValue;\n      return acc;\n    }, {});\n  }\n\n  return {\n    [property]: cssValue\n  };\n}\n\nexport { getResponsiveValue };","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,KAA9B,EAAqC;EACnC,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,MAAnB,CAA2BC,UAAD,IAAgBA,UAAU,KAAK,MAAzD,EAAiEC,IAAjE,CAAsE,CAACC,CAAD,EAAIC,CAAJ,KAAUR,KAAK,CAACS,EAAN,CAASC,IAAT,CAAc;IAAEA,IAAI,EAAEH,CAAR;IAAWI,KAAK,EAAEX,KAAK,CAACY;EAAxB,CAAd,IAAuDZ,KAAK,CAACS,EAAN,CAASC,IAAT,CAAc;IAAEA,IAAI,EAAEF,CAAR;IAAWG,KAAK,EAAEX,KAAK,CAACY;EAAxB,CAAd,CAAvI,CAAf;EACA,OAAO,UAAUb,KAAV,GAAkB,CAAC,MAAD,EAAS,GAAGE,MAAZ,CAAlB,GAAwCA,MAA/C;AACD;;AACM,SAASY,kBAAT,OAAkE;EAAA,IAAtC;IAAEd,KAAF;IAASC,KAAT;IAAgBc,QAAhB;IAA0BC;EAA1B,CAAsC;;EACvE,IAAIhB,KAAK,IAAI,IAAb,EAAmB;IACjB,OAAO,KAAK,CAAZ;EACD;;EACD,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7B,MAAMiB,MAAM,GAAGlB,aAAa,CAACC,KAAD,EAAQC,KAAR,CAAb,CAA4BiB,MAA5B,CAAmC,CAACC,GAAD,EAAMC,aAAN,KAAwB;MACxE,IAAIA,aAAa,KAAK,MAAlB,IAA4BpB,KAAK,CAACqB,IAAN,KAAe,KAAK,CAApD,EAAuD;QACrD,MAAMC,SAAS,GAAGP,QAAQ,CAACf,KAAK,CAACqB,IAAP,EAAapB,KAAb,CAA1B;;QACA,IAAIsB,KAAK,CAACC,OAAN,CAAcR,QAAd,CAAJ,EAA6B;UAC3BA,QAAQ,CAACS,OAAT,CAAkBC,IAAD,IAAU;YACzBP,GAAG,CAACO,IAAD,CAAH,GAAYJ,SAAZ;UACD,CAFD;UAGA,OAAOH,GAAP;QACD;;QACDA,GAAG,CAACH,QAAD,CAAH,GAAgBM,SAAhB;QACA,OAAOH,GAAP;MACD;;MACD,MAAMQ,eAAe,GAAGZ,QAAQ,CAACf,KAAK,CAACoB,aAAD,CAAN,EAAuBnB,KAAvB,CAAhC;;MACA,IAAIsB,KAAK,CAACC,OAAN,CAAcR,QAAd,CAAJ,EAA6B;QAC3BG,GAAG,CAAClB,KAAK,CAACS,EAAN,CAASkB,UAAT,CAAoBR,aAApB,CAAD,CAAH,GAA0C,EAA1C;QACAJ,QAAQ,CAACS,OAAT,CAAkBC,IAAD,IAAU;UACzBP,GAAG,CAAClB,KAAK,CAACS,EAAN,CAASkB,UAAT,CAAoBR,aAApB,CAAD,CAAH,CAAwCM,IAAxC,IAAgDC,eAAhD;QACD,CAFD;QAGA,OAAOR,GAAP;MACD;;MACDA,GAAG,CAAClB,KAAK,CAACS,EAAN,CAASkB,UAAT,CAAoBR,aAApB,CAAD,CAAH,GAA0C;QACxC,CAACJ,QAAD,GAAYW;MAD4B,CAA1C;MAGA,OAAOR,GAAP;IACD,CAxBc,EAwBZ,EAxBY,CAAf;IAyBA,OAAOF,MAAP;EACD;;EACD,MAAMY,QAAQ,GAAGd,QAAQ,CAACf,KAAD,EAAQC,KAAR,CAAzB;;EACA,IAAIsB,KAAK,CAACC,OAAN,CAAcR,QAAd,CAAJ,EAA6B;IAC3B,OAAOA,QAAQ,CAACE,MAAT,CAAgB,CAACC,GAAD,EAAMO,IAAN,KAAe;MACpCP,GAAG,CAACO,IAAD,CAAH,GAAYG,QAAZ;MACA,OAAOV,GAAP;IACD,CAHM,EAGJ,EAHI,CAAP;EAID;;EACD,OAAO;IAAE,CAACH,QAAD,GAAYa;EAAd,CAAP;AACF","names":["getSortedKeys","value","theme","sorted","Object","keys","filter","breakpoint","sort","a","b","fn","size","sizes","breakpoints","getResponsiveValue","getValue","property","result","reduce","acc","breakpointKey","base","baseValue","Array","isArray","forEach","prop","breakpointValue","largerThan","cssValue"],"sources":["D:\\forum-system-with-react-novu-node\\client\\node_modules\\@mantine\\core\\src\\Box\\style-system-props\\get-responsive-value\\get-responsive-value.ts"],"sourcesContent":["import { MantineTheme, CSSObject } from '@mantine/styles';\n\nfunction getSortedKeys(value: Record<string, any>, theme: MantineTheme) {\n  const sorted = Object.keys(value)\n    .filter((breakpoint) => breakpoint !== 'base')\n    .sort(\n      (a, b) =>\n        theme.fn.size({ size: a, sizes: theme.breakpoints }) -\n        theme.fn.size({ size: b, sizes: theme.breakpoints })\n    );\n  return 'base' in value ? ['base', ...sorted] : sorted;\n}\n\nexport type StyleProperty = string | string[];\n\ninterface GetResponsiveStyles {\n  value: any;\n  theme: MantineTheme;\n  getValue: (value: any, theme: MantineTheme) => any;\n  property: StyleProperty;\n}\n\nexport function getResponsiveValue({ value, theme, getValue, property }: GetResponsiveStyles) {\n  if (value == null) {\n    return undefined;\n  }\n\n  if (typeof value === 'object') {\n    const result = getSortedKeys(value, theme).reduce<CSSObject>((acc, breakpointKey) => {\n      if (breakpointKey === 'base' && value.base !== undefined) {\n        const baseValue = getValue(value.base, theme);\n\n        if (Array.isArray(property)) {\n          property.forEach((prop) => {\n            acc[prop] = baseValue;\n          });\n          return acc;\n        }\n\n        acc[property] = baseValue;\n        return acc;\n      }\n\n      const breakpointValue = getValue(value[breakpointKey], theme);\n\n      if (Array.isArray(property)) {\n        acc[theme.fn.largerThan(breakpointKey as any)] = {};\n        property.forEach((prop) => {\n          acc[theme.fn.largerThan(breakpointKey as any)][prop] = breakpointValue;\n        });\n\n        return acc;\n      }\n\n      acc[theme.fn.largerThan(breakpointKey as any)] = {\n        [property]: breakpointValue,\n      };\n\n      return acc;\n    }, {});\n\n    return result;\n  }\n\n  const cssValue = getValue(value, theme);\n\n  if (Array.isArray(property)) {\n    return property.reduce((acc, prop) => {\n      acc[prop] = cssValue;\n      return acc;\n    }, {});\n  }\n\n  return { [property]: cssValue };\n}\n"]},"metadata":{},"sourceType":"module"}