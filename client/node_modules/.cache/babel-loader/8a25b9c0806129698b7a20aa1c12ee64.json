{"ast":null,"code":"import { useEffect } from 'react';\nimport { getHotkeyMatcher } from './parse-hotkey.js';\nexport { getHotkeyHandler } from './parse-hotkey.js';\n\nfunction shouldFireEvent(event, tagsToIgnore) {\n  let triggerOnContentEditable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (event.target instanceof HTMLElement) {\n    if (triggerOnContentEditable) {\n      return !tagsToIgnore.includes(event.target.tagName);\n    }\n\n    return !event.target.isContentEditable && !tagsToIgnore.includes(event.target.tagName);\n  }\n\n  return true;\n}\n\nfunction useHotkeys(hotkeys) {\n  let tagsToIgnore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [\"INPUT\", \"TEXTAREA\", \"SELECT\"];\n  let triggerOnContentEditable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  useEffect(() => {\n    const keydownListener = event => {\n      hotkeys.forEach(_ref => {\n        let [hotkey, handler, options = {\n          preventDefault: true\n        }] = _ref;\n\n        if (getHotkeyMatcher(hotkey)(event) && shouldFireEvent(event, tagsToIgnore, triggerOnContentEditable)) {\n          if (options.preventDefault) {\n            event.preventDefault();\n          }\n\n          handler(event);\n        }\n      });\n    };\n\n    document.documentElement.addEventListener(\"keydown\", keydownListener);\n    return () => document.documentElement.removeEventListener(\"keydown\", keydownListener);\n  }, [hotkeys]);\n}\n\nexport { useHotkeys };","map":{"version":3,"mappings":";;;;AAGA,SAASA,eAAT,CAAyBC,KAAzB,EAAgCC,YAAhC,EAAgF;EAAA,IAAlCC,wBAAkC,uEAAP,KAAO;;EAC9E,IAAIF,KAAK,CAACG,MAAN,YAAwBC,WAA5B,EAAyC;IACvC,IAAIF,wBAAJ,EAA8B;MAC5B,OAAO,CAACD,YAAY,CAACI,QAAb,CAAsBL,KAAK,CAACG,MAAN,CAAaG,OAAnC,CAAR;IACD;;IACD,OAAO,CAACN,KAAK,CAACG,MAAN,CAAaI,iBAAd,IAAmC,CAACN,YAAY,CAACI,QAAb,CAAsBL,KAAK,CAACG,MAAN,CAAaG,OAAnC,CAA3C;EACD;;EACD,OAAO,IAAP;AACD;;AACM,SAASE,UAAT,CAAoBC,OAApB,EAA+G;EAAA,IAAlFR,YAAkF,uEAAnE,CAAC,OAAD,EAAU,UAAV,EAAsB,QAAtB,CAAmE;EAAA,IAAlCC,wBAAkC,uEAAP,KAAO;EACpHQ,SAAS,CAAC,MAAM;IACd,MAAMC,eAAe,GAAIX,KAAD,IAAW;MACjCS,OAAO,CAACG,OAAR,CAAgB,QAA2D;QAAA,IAA1D,CAACC,MAAD,EAASC,OAAT,EAAkBC,OAAO,GAAG;UAAEC,cAAc,EAAE;QAAlB,CAA5B,CAA0D;;QACzE,IAAIC,gBAAgB,CAACJ,MAAD,CAAhB,CAAyBb,KAAzB,KAAmCD,eAAe,CAACC,KAAD,EAAQC,YAAR,EAAsBC,wBAAtB,CAAtD,EAAuG;UACrG,IAAIa,OAAO,CAACC,cAAZ,EAA4B;YAC1BhB,KAAK,CAACgB,cAAN;UACD;;UACDF,OAAO,CAACd,KAAD,CAAP;QACD;MACF,CAPD;IAQD,CATD;;IAUAkB,QAAQ,CAACC,eAAT,CAAyBC,gBAAzB,CAA0C,SAA1C,EAAqDT,eAArD;IACA,OAAO,MAAMO,QAAQ,CAACC,eAAT,CAAyBE,mBAAzB,CAA6C,SAA7C,EAAwDV,eAAxD,CAAb;EACD,CAbQ,EAaN,CAACF,OAAD,CAbM,CAAT;AAcF","names":["shouldFireEvent","event","tagsToIgnore","triggerOnContentEditable","target","HTMLElement","includes","tagName","isContentEditable","useHotkeys","hotkeys","useEffect","keydownListener","forEach","hotkey","handler","options","preventDefault","getHotkeyMatcher","document","documentElement","addEventListener","removeEventListener"],"sources":["D:\\forum-system-with-react-novu-node\\client\\node_modules\\@mantine\\hooks\\src\\use-hotkeys\\use-hotkeys.ts"],"sourcesContent":["import { useEffect } from 'react';\nimport { getHotkeyHandler, getHotkeyMatcher, HotkeyItemOptions } from './parse-hotkey';\n\nexport type { HotkeyItemOptions };\nexport { getHotkeyHandler };\n\nexport type HotkeyItem = [string, (event: KeyboardEvent) => void, HotkeyItemOptions?];\n\nfunction shouldFireEvent(\n  event: KeyboardEvent,\n  tagsToIgnore: string[],\n  triggerOnContentEditable = false\n) {\n  if (event.target instanceof HTMLElement) {\n    if (triggerOnContentEditable) {\n      return !tagsToIgnore.includes(event.target.tagName);\n    }\n\n    return !event.target.isContentEditable && !tagsToIgnore.includes(event.target.tagName);\n  }\n\n  return true;\n}\n\nexport function useHotkeys(\n  hotkeys: HotkeyItem[],\n  tagsToIgnore: string[] = ['INPUT', 'TEXTAREA', 'SELECT'],\n  triggerOnContentEditable = false\n) {\n  useEffect(() => {\n    const keydownListener = (event: KeyboardEvent) => {\n      hotkeys.forEach(([hotkey, handler, options = { preventDefault: true }]) => {\n        if (\n          getHotkeyMatcher(hotkey)(event) &&\n          shouldFireEvent(event, tagsToIgnore, triggerOnContentEditable)\n        ) {\n          if (options.preventDefault) {\n            event.preventDefault();\n          }\n\n          handler(event);\n        }\n      });\n    };\n\n    document.documentElement.addEventListener('keydown', keydownListener);\n    return () => document.documentElement.removeEventListener('keydown', keydownListener);\n  }, [hotkeys]);\n}\n"]},"metadata":{},"sourceType":"module"}