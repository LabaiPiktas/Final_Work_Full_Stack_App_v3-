{"ast":null,"code":"var _jsxFileName = \"D:\\\\forum-system-with-react-node_edited_crashed\\\\client\\\\src\\\\components\\\\Replies.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Replies = () => {\n  _s();\n  const [thread, setThread] = useState(null);\n  const [replyList, setReplyList] = useState([]);\n  const [reply, setReply] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const {\n    id\n  } = useParams();\n  const fetchThread = () => {\n    fetch(`http://localhost:4000/api/all/threads/${id}`).then(res => res.json()).then(data => {\n      const selectedThread = data.thread;\n      if (selectedThread) {\n        const updatedReplyList = selectedThread.replies.map(reply => ({\n          ...reply\n        }));\n        setThread(selectedThread);\n        setReplyList(updatedReplyList);\n        setTitle(selectedThread.title);\n      } else {\n        setTitle(\"Thread not found\");\n      }\n    }).catch(err => console.error(err));\n  };\n  useEffect(() => {\n    fetchThread();\n  }, []);\n  const addReply = () => {\n    const newReply = {\n      _id: Date.now().toString(),\n      // Generate a temporary ID for the new reply\n      name: \"Your Name\",\n      // Replace with the actual name or username\n      text: reply\n    };\n    setReplyList(prevReplyList => [...prevReplyList, newReply]);\n    setReply(\"\");\n\n    // Send the new reply to the server to save in the database\n    fetch(`http://localhost:4000/api/add/reply/${id}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        replyText: reply,\n        userId: localStorage.getItem(\"_id\")\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(data => {\n      console.log(data.message);\n    }).catch(err => console.error(err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"replies\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"repliesTitle\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), localStorage.getItem(\"_id\") && /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"modal__content\",\n      onSubmit: addReply,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"reply\",\n        children: \"Reply to the thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: 5,\n        value: reply,\n        onChange: e => setReply(e.target.value),\n        type: \"text\",\n        name: \"reply\",\n        className: \"modalInput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"modalBtn\",\n        children: \"SEND\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thread__container\",\n      children: replyList.map(reply => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"thread__item\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"react__container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              opacity: \"0.5\"\n            },\n            children: [\"by \", reply.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: reply.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)\n      }, reply._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(Replies, \"Lfr5Zg5p1UiX1oXc/3CYK35mbTw=\", false, function () {\n  return [useParams];\n});\n_c = Replies;\nexport default Replies;\nvar _c;\n$RefreshReg$(_c, \"Replies\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","Replies","_s","thread","setThread","replyList","setReplyList","reply","setReply","title","setTitle","id","fetchThread","fetch","then","res","json","data","selectedThread","updatedReplyList","replies","map","catch","err","console","error","addReply","newReply","_id","Date","now","toString","name","text","prevReplyList","method","body","JSON","stringify","replyText","userId","localStorage","getItem","headers","log","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","rows","value","onChange","e","target","type","style","opacity","_c","$RefreshReg$"],"sources":["D:/forum-system-with-react-node_edited_crashed/client/src/components/Replies.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst Replies = () => {\n  const [thread, setThread] = useState(null);\n  const [replyList, setReplyList] = useState([]);\n  const [reply, setReply] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const { id } = useParams();\n\n  const fetchThread = () => {\n    fetch(`http://localhost:4000/api/all/threads/${id}`)\n      .then((res) => res.json())\n      .then((data) => {\n        const selectedThread = data.thread;\n        if (selectedThread) {\n          const updatedReplyList = selectedThread.replies.map((reply) => ({\n            ...reply,\n          }));\n\n          setThread(selectedThread);\n          setReplyList(updatedReplyList);\n          setTitle(selectedThread.title);\n        } else {\n          setTitle(\"Thread not found\");\n        }\n      })\n      .catch((err) => console.error(err));\n  };\n\n  useEffect(() => {\n    fetchThread();\n  }, []);\n\n  const addReply = () => {\n    const newReply = {\n      _id: Date.now().toString(), // Generate a temporary ID for the new reply\n      name: \"Your Name\", // Replace with the actual name or username\n      text: reply,\n    };\n\n    setReplyList((prevReplyList) => [...prevReplyList, newReply]);\n    setReply(\"\");\n\n    // Send the new reply to the server to save in the database\n    fetch(`http://localhost:4000/api/add/reply/${id}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        replyText: reply,\n        userId: localStorage.getItem(\"_id\"),\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data.message);\n      })\n      .catch((err) => console.error(err));\n  };\n\n  return (\n    <main className=\"replies\">\n      <h1 className=\"repliesTitle\">{title}</h1>\n\n      {localStorage.getItem(\"_id\") && (\n        <form className=\"modal__content\" onSubmit={addReply}>\n          <label htmlFor=\"reply\">Reply to the thread</label>\n          <textarea\n            rows={5}\n            value={reply}\n            onChange={(e) => setReply(e.target.value)}\n            type=\"text\"\n            name=\"reply\"\n            className=\"modalInput\"\n          />\n\n          <button type=\"submit\" className=\"modalBtn\">\n            SEND\n          </button>\n        </form>\n      )}\n\n      <div className=\"thread__container\">\n        {replyList.map((reply) => (\n          <div className=\"thread__item\" key={reply._id}>\n            <div className=\"react__container\">\n              <p style={{ opacity: \"0.5\" }}>by {reply.name}</p>\n              <p>{reply.text}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </main>\n  );\n};\n\nexport default Replies;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}