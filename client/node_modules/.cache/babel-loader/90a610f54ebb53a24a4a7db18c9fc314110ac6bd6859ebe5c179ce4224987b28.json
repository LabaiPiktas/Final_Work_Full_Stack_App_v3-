{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Instrument\\u0173 skyrius\\\\Desktop\\\\Final_Work_Full_Stack_App\\\\client\\\\src\\\\components\\\\Replies.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\nimport ReplyLikes from \"../utils/ReplyLikes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Replies = () => {\n  _s();\n  const [thread, setThread] = useState(null);\n  const [replyList, setReplyList] = useState([]);\n  const [reply, setReply] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const [replyLikes, setReplyLikes] = useState([]);\n  const addReply = () => {\n    fetch(`http://localhost:4000/api/add/reply/${id}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        replyText: reply,\n        userId: localStorage.getItem(\"_id\")\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        throw new Error(\"Failed to add reply\");\n      }\n    }).then(data => {\n      alert(data.message);\n      window.location.reload(); // Refresh the page\n      if (data.message === \"Reply added successfully!\") {\n        const newReply = {\n          _id: data.reply._id,\n          text: reply,\n          name: \"User\",\n          likes: [] // Initialize likes aas an empty array\n        };\n\n        setReplyList(prevReplyList => [...prevReplyList, newReply]);\n        setReplyLikes(prevLikes => [...prevLikes, newReply._id]); // Add the new reply's _id to replyLikes state\n      } else {\n        alert(data.message); // Display the error message\n      }\n    }).catch(err => console.error(err));\n  };\n  const handleSubmitReply = e => {\n    e.preventDefault();\n    addReply();\n    setReply(\"\");\n  };\n  useEffect(() => {\n    const fetchThread = () => {\n      setIsLoading(true);\n      fetch(\"http://localhost:4000/api/all/threads\").then(res => res.json()).then(data => {\n        const selectedThread = data.threads.find(t => t.id === id);\n        if (selectedThread) {\n          setThread(selectedThread);\n          setReplyList(selectedThread.replies || []); // Set replyList as an empty array if it's undefined\n          setTitle(selectedThread.title);\n          // Initialize the likes array for each reply\n          const updatedReplies = selectedThread.replies.map(reply => {\n            return {\n              ...reply,\n              likes: reply.likes || []\n            };\n          });\n          setReplyList(updatedReplies);\n        } else {\n          setTitle(\"Thread not found\");\n        }\n      }).catch(err => console.error(err)).finally(() => setIsLoading(false));\n    };\n    fetchThread();\n  }, [id]);\n  const deleteReply = replyId => {\n    fetch(`http://localhost:4000/api/delete/reply/${id}/${replyId}`, {\n      method: \"DELETE\"\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        throw new Error(\"Failed to delete reply\");\n      }\n    }).then(data => {\n      setReplyList(prevReplyList => prevReplyList.filter(reply => reply._id !== replyId));\n      alert(data.message);\n    }).catch(err => console.error(err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"replies\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"repliesTitle\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this) : thread && /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"modal__content\",\n      onSubmit: handleSubmitReply,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"reply\",\n        children: \"Reply to the thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: 5,\n        value: reply,\n        onChange: e => setReply(e.target.value),\n        type: \"text\",\n        name: \"reply\",\n        className: \"modalInput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"modalBtn\",\n        children: \"SEND\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/dashboard\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"modalBtn\",\n        children: \"Create a Thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thread__container\",\n      children: replyList.map(reply => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"thread__item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: reply.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"react__container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              opacity: \"0.5\"\n            },\n            children: [\"by \", reply.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              opacity: \"0.5\"\n            },\n            children: reply.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this), localStorage.getItem(\"_id\") === reply.userId && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalBtn\",\n            onClick: () => deleteReply(reply._id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ReplyLikes, {\n            numberOfLikes: reply.likes.length,\n            replyId: reply._id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this)]\n      }, reply._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(Replies, \"Awlxm6xuaHDYSe65jYr0JIF2JPw=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = Replies;\nexport default Replies;\nvar _c;\n$RefreshReg$(_c, \"Replies\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","Link","ReplyLikes","jsxDEV","_jsxDEV","Replies","_s","thread","setThread","replyList","setReplyList","reply","setReply","title","setTitle","isLoading","setIsLoading","navigate","id","replyLikes","setReplyLikes","addReply","fetch","method","body","JSON","stringify","replyText","userId","localStorage","getItem","headers","then","res","ok","json","Error","data","alert","message","window","location","reload","newReply","_id","text","name","likes","prevReplyList","prevLikes","catch","err","console","error","handleSubmitReply","e","preventDefault","fetchThread","selectedThread","threads","find","t","replies","updatedReplies","map","finally","deleteReply","replyId","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","rows","value","onChange","target","type","to","style","opacity","timestamp","onClick","numberOfLikes","length","_c","$RefreshReg$"],"sources":["C:/Users/InstrumentÅ³ skyrius/Desktop/Final_Work_Full_Stack_App/client/src/components/Replies.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\nimport ReplyLikes from \"../utils/ReplyLikes\";\n\nconst Replies = () => {\n  const [thread, setThread] = useState(null);\n  const [replyList, setReplyList] = useState([]);\n  const [reply, setReply] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [replyLikes, setReplyLikes] = useState([]);\n\n  const addReply = () => {\n    fetch(`http://localhost:4000/api/add/reply/${id}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        replyText: reply,\n        userId: localStorage.getItem(\"_id\"),\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          throw new Error(\"Failed to add reply\");\n        }\n      })\n      .then((data) => {\n        alert(data.message);\n        window.location.reload(); // Refresh the page\n        if (data.message === \"Reply added successfully!\") {\n          const newReply = {\n            _id: data.reply._id,\n            text: reply,\n            name: \"User\",\n            likes: [], // Initialize likes aas an empty array\n          };\n          setReplyList((prevReplyList) => [...prevReplyList, newReply]);\n          setReplyLikes((prevLikes) => [...prevLikes, newReply._id]); // Add the new reply's _id to replyLikes state\n          \n\n          \n        } else {\n          alert(data.message); // Display the error message\n        }\n      })\n      .catch((err) => console.error(err));\n  };\n\n  const handleSubmitReply = (e) => {\n    e.preventDefault();\n    addReply();\n    setReply(\"\");\n  };\n\n  useEffect(() => {\n    const fetchThread = () => {\n      setIsLoading(true);\n\n      fetch(\"http://localhost:4000/api/all/threads\")\n        .then((res) => res.json())\n        .then((data) => {\n          const selectedThread = data.threads.find((t) => t.id === id);\n          if (selectedThread) {\n            setThread(selectedThread);\n            setReplyList(selectedThread.replies || []); // Set replyList as an empty array if it's undefined\n            setTitle(selectedThread.title);\n            // Initialize the likes array for each reply\n            const updatedReplies = selectedThread.replies.map((reply) => {\n              return {\n                ...reply,\n                likes: reply.likes || [],\n              };\n            });\n            setReplyList(updatedReplies);\n          } else {\n            setTitle(\"Thread not found\");\n          }\n        })\n        .catch((err) => console.error(err))\n        .finally(() => setIsLoading(false));\n    };\n\n    fetchThread();\n  }, [id]);\n\n  const deleteReply = (replyId) => {\n    fetch(`http://localhost:4000/api/delete/reply/${id}/${replyId}`, {\n      method: \"DELETE\",\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          throw new Error(\"Failed to delete reply\");\n        }\n      })\n      .then((data) => {\n        setReplyList((prevReplyList) =>\n          prevReplyList.filter((reply) => reply._id !== replyId)\n        );\n        alert(data.message);\n      })\n      .catch((err) => console.error(err));\n  };\n\n  return (\n    <main className=\"replies\">\n      <h1 className=\"repliesTitle\">{title}</h1>\n\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        thread && (\n          <form className=\"modal__content\" onSubmit={handleSubmitReply}>\n            <label htmlFor=\"reply\">Reply to the thread</label>\n            <textarea\n              rows={5}\n              value={reply}\n              onChange={(e) => setReply(e.target.value)}\n              type=\"text\"\n              name=\"reply\"\n              className=\"modalInput\"\n            />\n\n            <button className=\"modalBtn\">SEND</button>\n          </form>\n        )\n      )}\n      <Link to=\"/dashboard\">\n        <button className=\"modalBtn\">Create a Thread</button>\n      </Link>\n      <div className=\"thread__container\">\n        {replyList.map((reply) => (\n          <div className=\"thread__item\" key={reply._id}>\n            <p>{reply.text}</p>\n            <div className=\"react__container\">\n              <p style={{ opacity: \"0.5\" }}>by {reply.name}</p>\n              <p style={{ opacity: \"0.5\" }}>{reply.timestamp}</p>\n\n              {localStorage.getItem(\"_id\") === reply.userId && (\n                <button\n                  className=\"modalBtn\"\n                  onClick={() => deleteReply(reply._id)}\n                >\n                  Delete\n                </button>\n              )}\n              <ReplyLikes\n                numberOfLikes={reply.likes.length}\n                replyId={reply._id}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n    </main>\n  );\n};\n\nexport default Replies;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}