{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Instrument\\u0173 skyrius\\\\Desktop\\\\Final_Work_Full_Stack_App\\\\client\\\\src\\\\components\\\\Replies.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\nimport ReplyLikes from \"../utils/ReplyLikes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Replies = () => {\n  _s();\n  const [thread, setThread] = useState(null);\n  const [replyList, setReplyList] = useState([]);\n  const [reply, setReply] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const [replyLikes, setReplyLikes] = useState([]);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedReplyId, setEditedReplyId] = useState(null);\n  const editReply = replyId => {\n    const newText = prompt(\"Enter the new text:\");\n    if (newText) {\n      fetch(`http://localhost:4000/api/edit/reply/${id}/${replyId}`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          newText\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(res => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          throw new Error(\"Failed to edit reply\");\n        }\n      }).then(data => {\n        if (data.success) {\n          const updatedReplyList = replyList.map(reply => reply._id === replyId ? {\n            ...reply,\n            text: newText,\n            edited: true\n          } : reply);\n          setReplyList(updatedReplyList);\n          alert(data.message);\n        } else {\n          alert(data.message);\n        }\n      }).catch(error => {\n        console.error(\"Error editing reply:\", error);\n      });\n    }\n  };\n  const addReply = () => {\n    fetch(`http://localhost:4000/api/add/reply/${id}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        replyText: reply,\n        userId: localStorage.getItem(\"_id\")\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        throw new Error(\"Failed to add reply\");\n      }\n    }).then(data => {\n      window.location.reload(); // Refresh the page\n      if (data.message === \"Reply added successfully!\") {\n        const newReply = {\n          _id: data.reply._id,\n          text: reply,\n          name: \"User\"\n        };\n        setReplyList(prevReplyList => [...prevReplyList, newReply]);\n        setReplyLikes(prevLikes => [...prevLikes, newReply._id]); // Add the new reply's _id to replyLikes state\n        alert(data.message);\n        navigate(\"/:id/replies\"); // Navigate to the main page after successful reply submission\n      } else {\n        alert(data.message); // Display the error message\n      }\n    }).catch(err => console.error(err));\n  };\n  const handleSubmitReply = e => {\n    e.preventDefault();\n    addReply();\n    setReply(\"\");\n  };\n  useEffect(() => {\n    const fetchThread = () => {\n      setIsLoading(true);\n      fetch(\"http://localhost:4000/api/all/threads\").then(res => res.json()).then(data => {\n        const selectedThread = data.threads.find(t => t.id === id);\n        if (selectedThread) {\n          setThread(selectedThread);\n          setReplyList(selectedThread.replies || []); // Set replyList as an empty array if it's undefined\n          setTitle(selectedThread.title);\n          // Initialize the likes array for each reply\n          const updatedReplies = selectedThread.replies.map(reply => {\n            return {\n              ...reply,\n              likes: reply.likes || []\n            };\n          });\n          setReplyList(updatedReplies);\n        } else {\n          setTitle(\"Thread not found\");\n        }\n      }).catch(err => console.error(err)).finally(() => setIsLoading(false));\n    };\n    fetchThread();\n  }, [id]);\n  const deleteReply = replyId => {\n    fetch(`http://localhost:4000/api/delete/reply/${id}/${replyId}`, {\n      method: \"DELETE\"\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        throw new Error(\"Failed to delete reply\");\n      }\n    }).then(data => {\n      setReplyList(prevReplyList => prevReplyList.filter(reply => reply._id !== replyId));\n      alert(data.message);\n    }).catch(err => console.error(err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"replies\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"repliesTitle\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this) : thread && /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"modal__content\",\n      onSubmit: handleSubmitReply,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"reply\",\n        children: \"Reply to the thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: 5,\n        value: reply,\n        onChange: e => setReply(e.target.value),\n        type: \"text\",\n        name: \"reply\",\n        className: \"modalInput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"modalBtn\",\n        children: \"SEND\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/dashboard\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"modalBtn\",\n        children: \"Create a Thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thread__container\",\n      children: replyList.map(reply => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `thread__item ${reply._id === editedReplyId ? \"edited\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: reply.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"react__container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              opacity: \"0.5\"\n            },\n            children: [\"by \", reply.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              opacity: \"0.5\"\n            },\n            children: reply.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this), localStorage.getItem(\"_id\") === reply.userId && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalBtn\",\n            onClick: () => deleteReply(reply._id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ReplyLikes, {\n            numberOfLikes: reply.likes.length,\n            replyId: reply._id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this)]\n      }, reply._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(Replies, \"Wf+JwEkgHbB/pdOLk0k0cXMvW6A=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = Replies;\nexport default Replies;\nvar _c;\n$RefreshReg$(_c, \"Replies\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","Link","ReplyLikes","jsxDEV","_jsxDEV","Replies","_s","thread","setThread","replyList","setReplyList","reply","setReply","title","setTitle","isLoading","setIsLoading","navigate","id","replyLikes","setReplyLikes","isEditing","setIsEditing","editedReplyId","setEditedReplyId","editReply","replyId","newText","prompt","fetch","method","body","JSON","stringify","headers","then","res","ok","json","Error","data","success","updatedReplyList","map","_id","text","edited","alert","message","catch","error","console","addReply","replyText","userId","localStorage","getItem","window","location","reload","newReply","name","prevReplyList","prevLikes","err","handleSubmitReply","e","preventDefault","fetchThread","selectedThread","threads","find","t","replies","updatedReplies","likes","finally","deleteReply","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","rows","value","onChange","target","type","to","style","opacity","timestamp","onClick","numberOfLikes","length","_c","$RefreshReg$"],"sources":["C:/Users/Instrumentų skyrius/Desktop/Final_Work_Full_Stack_App/client/src/components/Replies.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\nimport ReplyLikes from \"../utils/ReplyLikes\";\n\nconst Replies = () => {\n  const [thread, setThread] = useState(null);\n  const [replyList, setReplyList] = useState([]);\n  const [reply, setReply] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [replyLikes, setReplyLikes] = useState([]);\n  const [isEditing, setIsEditing] = useState(false);\nconst [editedReplyId, setEditedReplyId] = useState(null);\n\nconst editReply = (replyId) => {\n  const newText = prompt(\"Enter the new text:\");\n  if (newText) {\n    fetch(`http://localhost:4000/api/edit/reply/${id}/${replyId}`, {\n      method: \"PUT\",\n      body: JSON.stringify({\n        newText,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          throw new Error(\"Failed to edit reply\");\n        }\n      })\n      .then((data) => {\n        if (data.success) {\n          const updatedReplyList = replyList.map((reply) =>\n            reply._id === replyId\n              ? { ...reply, text: newText, edited: true }\n              : reply\n          );\n          setReplyList(updatedReplyList);\n          alert(data.message);\n        } else {\n          alert(data.message);\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error editing reply:\", error);\n      });\n  }\n};\n\n\n  const addReply = () => {\n    fetch(`http://localhost:4000/api/add/reply/${id}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        replyText: reply,\n        userId: localStorage.getItem(\"_id\"),\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          throw new Error(\"Failed to add reply\");\n        }\n      })\n      .then((data) => {\n        \n        window.location.reload(); // Refresh the page\n        if (data.message === \"Reply added successfully!\") {\n          const newReply = {\n            _id: data.reply._id,\n            text: reply,\n            name: \"User\",\n            \n          };\n          setReplyList((prevReplyList) => [...prevReplyList, newReply]);\n          setReplyLikes((prevLikes) => [...prevLikes, newReply._id]); // Add the new reply's _id to replyLikes state\n          alert(data.message);\n\n          navigate(\"/:id/replies\"); // Navigate to the main page after successful reply submission\n        } else {\n          alert(data.message); // Display the error message\n        }\n      })\n      .catch((err) => console.error(err));\n  };\n\n  const handleSubmitReply = (e) => {\n    e.preventDefault();\n    addReply();\n    setReply(\"\");\n  };\n\n  useEffect(() => {\n    const fetchThread = () => {\n      setIsLoading(true);\n\n      fetch(\"http://localhost:4000/api/all/threads\")\n        .then((res) => res.json())\n        .then((data) => {\n          const selectedThread = data.threads.find((t) => t.id === id);\n          if (selectedThread) {\n            setThread(selectedThread);\n            setReplyList(selectedThread.replies || []); // Set replyList as an empty array if it's undefined\n            setTitle(selectedThread.title);\n            // Initialize the likes array for each reply\n            const updatedReplies = selectedThread.replies.map((reply) => {\n              return {\n                ...reply,\n                likes: reply.likes || [],\n              };\n            });\n            setReplyList(updatedReplies);\n          } else {\n            setTitle(\"Thread not found\");\n          }\n        })\n        .catch((err) => console.error(err))\n        .finally(() => setIsLoading(false));\n    };\n\n    fetchThread();\n  }, [id]);\n\n  const deleteReply = (replyId) => {\n    fetch(`http://localhost:4000/api/delete/reply/${id}/${replyId}`, {\n      method: \"DELETE\",\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          throw new Error(\"Failed to delete reply\");\n        }\n      })\n      .then((data) => {\n        setReplyList((prevReplyList) =>\n          prevReplyList.filter((reply) => reply._id !== replyId)\n        );\n        alert(data.message);\n      })\n      .catch((err) => console.error(err));\n  };\n\n  return (\n    <main className=\"replies\">\n      <h1 className=\"repliesTitle\">{title}</h1>\n\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        thread && (\n          <form className=\"modal__content\" onSubmit={handleSubmitReply}>\n            <label htmlFor=\"reply\">Reply to the thread</label>\n            <textarea\n              rows={5}\n              value={reply}\n              onChange={(e) => setReply(e.target.value)}\n              type=\"text\"\n              name=\"reply\"\n              className=\"modalInput\"\n            />\n\n            <button className=\"modalBtn\">SEND</button>\n          </form>\n        )\n      )}\n      <Link to=\"/dashboard\">\n        <button className=\"modalBtn\">Create a Thread</button>\n      </Link>\n      <div className=\"thread__container\">\n        {replyList.map((reply) => (\n          <div\n          className={`thread__item ${reply._id === editedReplyId ? \"edited\" : \"\"}`}\n          key={reply._id}\n        >\n        \n            <p>{reply.text}</p>\n            <div className=\"react__container\">\n              <p style={{ opacity: \"0.5\" }}>by {reply.name}</p>\n              <p style={{ opacity: \"0.5\" }}>{reply.timestamp}</p>\n\n              {localStorage.getItem(\"_id\") === reply.userId && (\n                <button\n                  className=\"modalBtn\"\n                  onClick={() => deleteReply(reply._id)}\n                >\n                  Delete\n                </button>\n              )}\n              <ReplyLikes\n                numberOfLikes={reply.likes.length}\n                replyId={reply._id}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n    </main>\n  );\n};\n\nexport default Replies;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}