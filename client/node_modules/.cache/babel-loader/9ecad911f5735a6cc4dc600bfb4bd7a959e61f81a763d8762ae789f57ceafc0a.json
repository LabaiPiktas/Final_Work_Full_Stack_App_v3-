{"ast":null,"code":"var _jsxFileName = \"D:\\\\forum-system-with-react-node_edited_crashed\\\\client\\\\src\\\\components\\\\Replies.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Replies = () => {\n  _s();\n  const [thread, setThread] = useState(null);\n  const [replyList, setReplyList] = useState([]);\n  const [reply, setReply] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const addReply = () => {\n    fetch(`http://localhost:4000/api/add/reply/${id}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        replyText: reply,\n        userId: localStorage.getItem(\"_id\")\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        throw new Error(\"Failed to add reply\");\n      }\n    }).then(data => {\n      if (data.message === \"Reply added successfully!\") {\n        const newReply = {\n          _id: data.reply._id,\n          text: reply,\n          name: \"User\"\n        };\n        setReplyList(prevReplyList => [...prevReplyList, newReply]);\n        setSuccessMessage(data.message);\n        setReply(\"\"); // Išvalykite įvesties lauką po sėkmingo pridėjimo\n      } else {\n        alert(data.message); // Rodyti klaidos pranešimą\n      }\n    }).catch(err => console.error(err));\n  };\n  const handleSubmitReply = e => {\n    e.preventDefault();\n    if (reply.trim() === \"\") {\n      alert(\"Please enter a reply\"); // Rodyti klaidos pranešimą, jei atsakymas yra tuščias\n      return;\n    }\n    addReply();\n  };\n  useEffect(() => {\n    const fetchThread = () => {\n      setIsLoading(true);\n      fetch(\"http://localhost:4000/api/all/threads\").then(res => res.json()).then(data => {\n        const selectedThread = data.threads.find(t => t.id === id);\n        if (selectedThread) {\n          setThread(selectedThread);\n          setReplyList(selectedThread.replies);\n          setTitle(selectedThread.title);\n        } else {\n          setTitle(\"Thread not found\");\n        }\n      }).catch(err => console.error(err)).finally(() => setIsLoading(false));\n    };\n    fetchThread();\n  }, [id]);\n  useEffect(() => {\n    if (thread) {\n      const nonEmptyReplies = thread.replies.filter(reply => reply.text.trim() !== \"\");\n      setReplyList(nonEmptyReplies);\n    }\n  }, [thread]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"replies\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"repliesTitle\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this) : thread && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"modal__content\",\n        onSubmit: handleSubmitReply,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"reply\",\n          children: \"Reply to the thread\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: 5,\n          value: reply,\n          onChange: e => setReply(e.target.value),\n          type: \"text\",\n          name: \"reply\",\n          className: \"modalInput\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modalBtn\",\n          type: \"submit\",\n          children: \"SEND\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thread__container\",\n      children: replyList.map(reply => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"thread__item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: reply.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"react__container\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              opacity: \"0.5\"\n            },\n            children: [\"by \", reply.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)]\n      }, reply._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(Replies, \"cvl9fIytSkp0ol8j/4fwRfEfCcE=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = Replies;\nexport default Replies;\nvar _c;\n$RefreshReg$(_c, \"Replies\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","Replies","_s","thread","setThread","replyList","setReplyList","reply","setReply","title","setTitle","isLoading","setIsLoading","successMessage","setSuccessMessage","navigate","id","addReply","fetch","method","body","JSON","stringify","replyText","userId","localStorage","getItem","headers","then","res","ok","json","Error","data","message","newReply","_id","text","name","prevReplyList","alert","catch","err","console","error","handleSubmitReply","e","preventDefault","trim","fetchThread","selectedThread","threads","find","t","replies","finally","nonEmptyReplies","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","rows","value","onChange","target","type","map","style","opacity","_c","$RefreshReg$"],"sources":["D:/forum-system-with-react-node_edited_crashed/client/src/components/Replies.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\n\nconst Replies = () => {\n  const [thread, setThread] = useState(null);\n  const [replyList, setReplyList] = useState([]);\n  const [reply, setReply] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const navigate = useNavigate();\n  const { id } = useParams();\n\n  const addReply = () => {\n    fetch(`http://localhost:4000/api/add/reply/${id}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        replyText: reply,\n        userId: localStorage.getItem(\"_id\"),\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          throw new Error(\"Failed to add reply\");\n        }\n      })\n      .then((data) => {\n        if (data.message === \"Reply added successfully!\") {\n          const newReply = {\n            _id: data.reply._id,\n            text: reply,\n            name: \"User\",\n          };\n          setReplyList((prevReplyList) => [...prevReplyList, newReply]);\n          setSuccessMessage(data.message);\n          setReply(\"\"); // Išvalykite įvesties lauką po sėkmingo pridėjimo\n        } else {\n          alert(data.message); // Rodyti klaidos pranešimą\n        }\n      })\n      .catch((err) => console.error(err));\n  };\n\n  const handleSubmitReply = (e) => {\n    e.preventDefault();\n    if (reply.trim() === \"\") {\n      alert(\"Please enter a reply\"); // Rodyti klaidos pranešimą, jei atsakymas yra tuščias\n      return;\n    }\n    addReply();\n  };\n\n  useEffect(() => {\n    const fetchThread = () => {\n      setIsLoading(true);\n\n      fetch(\"http://localhost:4000/api/all/threads\")\n        .then((res) => res.json())\n        .then((data) => {\n          const selectedThread = data.threads.find((t) => t.id === id);\n          if (selectedThread) {\n            setThread(selectedThread);\n            setReplyList(selectedThread.replies);\n            setTitle(selectedThread.title);\n          } else {\n            setTitle(\"Thread not found\");\n          }\n        })\n        .catch((err) => console.error(err))\n        .finally(() => setIsLoading(false));\n    };\n\n    fetchThread();\n  }, [id]);\n\n  useEffect(() => {\n    if (thread) {\n      const nonEmptyReplies = thread.replies.filter(\n        (reply) => reply.text.trim() !== \"\"\n      );\n      setReplyList(nonEmptyReplies);\n    }\n  }, [thread]);\n\n  return (\n    <main className=\"replies\">\n      <h1 className=\"repliesTitle\">{title}</h1>\n\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        thread && (\n          <>\n            {successMessage && <p>{successMessage}</p>}\n            <form className=\"modal__content\" onSubmit={handleSubmitReply}>\n              <label htmlFor=\"reply\">Reply to the thread</label>\n              <textarea\n                rows={5}\n                value={reply}\n                onChange={(e) => setReply(e.target.value)}\n                type=\"text\"\n                name=\"reply\"\n                className=\"modalInput\"\n              />\n\n              <button className=\"modalBtn\" type=\"submit\">\n                SEND\n              </button>\n            </form>\n          </>\n        )\n      )}\n\n      <div className=\"thread__container\">\n        {replyList.map((reply) => (\n          <div className=\"thread__item\" key={reply._id}>\n            <p>{reply.text}</p>\n            <div className=\"react__container\">\n              <p style={{ opacity: \"0.5\" }}>by {reply.name}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </main>\n  );\n};\n\nexport default Replies;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}