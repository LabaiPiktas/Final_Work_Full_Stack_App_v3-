{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport { useDelayGroupContext, useFloating, offset, shift, flip, arrow, inline, useInteractions, useHover, useFocus, useRole, useDismiss, useDelayGroup } from '@floating-ui/react';\nimport { useId, useDidUpdate } from '@mantine/hooks';\nimport { useTooltipGroupContext } from './TooltipGroup/TooltipGroup.context.js';\nimport { useFloatingAutoUpdate } from '../Floating/use-floating-auto-update.js';\n\nfunction useTooltip(settings) {\n  const [uncontrolledOpened, setUncontrolledOpened] = useState(false);\n  const controlled = typeof settings.opened === \"boolean\";\n  const opened = controlled ? settings.opened : uncontrolledOpened;\n  const withinGroup = useTooltipGroupContext();\n  const uid = useId();\n  const {\n    delay: groupDelay,\n    currentId,\n    setCurrentId\n  } = useDelayGroupContext();\n  const onChange = useCallback(_opened => {\n    setUncontrolledOpened(_opened);\n\n    if (_opened) {\n      setCurrentId(uid);\n    }\n  }, [setCurrentId, uid]);\n  const {\n    x,\n    y,\n    reference,\n    floating,\n    context,\n    refs,\n    update,\n    placement,\n    middlewareData: {\n      arrow: {\n        x: arrowX,\n        y: arrowY\n      } = {}\n    }\n  } = useFloating({\n    placement: settings.position,\n    open: opened,\n    onOpenChange: onChange,\n    middleware: [offset(settings.offset), shift({\n      padding: 8\n    }), flip(), arrow({\n      element: settings.arrowRef,\n      padding: settings.arrowOffset\n    }), ...(settings.inline ? [inline()] : [])]\n  });\n  const {\n    getReferenceProps,\n    getFloatingProps\n  } = useInteractions([useHover(context, {\n    enabled: settings.events.hover,\n    delay: withinGroup ? groupDelay : {\n      open: settings.openDelay,\n      close: settings.closeDelay\n    },\n    mouseOnly: !settings.events.touch\n  }), useFocus(context, {\n    enabled: settings.events.focus,\n    keyboardOnly: true\n  }), useRole(context, {\n    role: \"tooltip\"\n  }), useDismiss(context, {\n    enabled: typeof settings.opened === void 0\n  }), useDelayGroup(context, {\n    id: uid\n  })]);\n  useFloatingAutoUpdate({\n    opened,\n    positionDependencies: settings.positionDependencies,\n    floating: {\n      refs,\n      update\n    }\n  });\n  useDidUpdate(() => {\n    var _a;\n\n    (_a = settings.onPositionChange) == null ? void 0 : _a.call(settings, placement);\n  }, [placement]);\n  const isGroupPhase = opened && currentId && currentId !== uid;\n  return {\n    x,\n    y,\n    arrowX,\n    arrowY,\n    reference,\n    floating,\n    getFloatingProps,\n    getReferenceProps,\n    isGroupPhase,\n    opened,\n    placement\n  };\n}\n\nexport { useTooltip };","map":{"version":3,"mappings":"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","names":["useTooltip","settings","uncontrolledOpened","setUncontrolledOpened","useState","controlled","opened","withinGroup","useTooltipGroupContext","uid","useId","delay","groupDelay","currentId","setCurrentId","useDelayGroupContext","onChange","useCallback","_opened","x","y","reference","floating","context","refs","update","placement","middlewareData","arrow","arrowX","arrowY","useFloating","position","open","onOpenChange","middleware","offset","shift","padding","flip","element","arrowRef","arrowOffset","inline","getReferenceProps","getFloatingProps","useInteractions","useHover","enabled","events","hover","openDelay","close","closeDelay","mouseOnly","touch","useFocus","focus","keyboardOnly","useRole","role","useDismiss","useDelayGroup","id","useFloatingAutoUpdate","positionDependencies","useDidUpdate","_a","onPositionChange","call","isGroupPhase"],"sources":["D:\\forum-system-with-react-novu-node\\client\\node_modules\\@mantine\\core\\src\\Tooltip\\use-tooltip.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport {\n  useFloating,\n  flip,\n  arrow,\n  offset,\n  shift,\n  useInteractions,\n  useHover,\n  useFocus,\n  useRole,\n  useDismiss,\n  useDelayGroupContext,\n  useDelayGroup,\n  inline,\n} from '@floating-ui/react';\nimport { useId, useDidUpdate } from '@mantine/hooks';\nimport { useTooltipGroupContext } from './TooltipGroup/TooltipGroup.context';\nimport { FloatingPosition, useFloatingAutoUpdate } from '../Floating';\n\ninterface UseTooltip {\n  position: FloatingPosition;\n  closeDelay: number;\n  openDelay: number;\n  onPositionChange?(position: FloatingPosition): void;\n  opened?: boolean;\n  offset: number;\n  arrowRef?: React.RefObject<HTMLDivElement>;\n  arrowOffset: number;\n  events: { hover: boolean; focus: boolean; touch: boolean };\n  positionDependencies: any[];\n  inline: boolean;\n}\n\nexport function useTooltip(settings: UseTooltip) {\n  const [uncontrolledOpened, setUncontrolledOpened] = useState(false);\n  const controlled = typeof settings.opened === 'boolean';\n  const opened = controlled ? settings.opened : uncontrolledOpened;\n  const withinGroup = useTooltipGroupContext();\n  const uid = useId();\n\n  const { delay: groupDelay, currentId, setCurrentId } = useDelayGroupContext();\n\n  const onChange = useCallback(\n    (_opened: boolean) => {\n      setUncontrolledOpened(_opened);\n\n      if (_opened) {\n        setCurrentId(uid);\n      }\n    },\n    [setCurrentId, uid]\n  );\n\n  const {\n    x,\n    y,\n    reference,\n    floating,\n    context,\n    refs,\n    update,\n    placement,\n    middlewareData: { arrow: { x: arrowX, y: arrowY } = {} },\n  } = useFloating({\n    placement: settings.position,\n    open: opened,\n    onOpenChange: onChange,\n    middleware: [\n      offset(settings.offset),\n      shift({ padding: 8 }),\n      flip(),\n      arrow({ element: settings.arrowRef, padding: settings.arrowOffset }),\n      ...(settings.inline ? [inline()] : []),\n    ],\n  });\n\n  const { getReferenceProps, getFloatingProps } = useInteractions([\n    useHover(context, {\n      enabled: settings.events.hover,\n      delay: withinGroup ? groupDelay : { open: settings.openDelay, close: settings.closeDelay },\n      mouseOnly: !settings.events.touch,\n    }),\n    useFocus(context, { enabled: settings.events.focus, keyboardOnly: true }),\n    useRole(context, { role: 'tooltip' }),\n    // cannot be used with controlled tooltip, page jumps\n    useDismiss(context, { enabled: typeof settings.opened === undefined }),\n    useDelayGroup(context, { id: uid }),\n  ]);\n\n  useFloatingAutoUpdate({\n    opened,\n    positionDependencies: settings.positionDependencies,\n    floating: { refs, update },\n  });\n\n  useDidUpdate(() => {\n    settings.onPositionChange?.(placement);\n  }, [placement]);\n\n  const isGroupPhase = opened && currentId && currentId !== uid;\n\n  return {\n    x,\n    y,\n    arrowX,\n    arrowY,\n    reference,\n    floating,\n    getFloatingProps,\n    getReferenceProps,\n    isGroupPhase,\n    opened,\n    placement,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}