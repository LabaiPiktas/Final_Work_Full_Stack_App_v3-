{"ast":null,"code":"import { useRef, useEffect } from 'react';\n\nfunction useTimeout(callback, delay) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    autoInvoke: false\n  };\n  const timeoutRef = useRef(null);\n\n  const start = function () {\n    for (var _len = arguments.length, callbackParams = new Array(_len), _key = 0; _key < _len; _key++) {\n      callbackParams[_key] = arguments[_key];\n    }\n\n    if (!timeoutRef.current) {\n      timeoutRef.current = window.setTimeout(() => {\n        callback(callbackParams);\n        timeoutRef.current = null;\n      }, delay);\n    }\n  };\n\n  const clear = () => {\n    if (timeoutRef.current) {\n      window.clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (options.autoInvoke) {\n      start();\n    }\n\n    return clear;\n  }, [delay]);\n  return {\n    start,\n    clear\n  };\n}\n\nexport { useTimeout };","map":{"version":3,"mappings":";;AACO,SAASA,UAAT,CAAoBC,QAApB,EAA8BC,KAA9B,EAAsE;EAAA,IAAjCC,OAAiC,uEAAvB;IAAEC,UAAU,EAAE;EAAd,CAAuB;EAC3E,MAAMC,UAAU,GAAGC,MAAM,CAAC,IAAD,CAAzB;;EACA,MAAMC,KAAK,GAAG,YAAuB;IAAA,kCAAnBC,cAAmB;MAAnBA,cAAmB;IAAA;;IACnC,IAAI,CAACH,UAAU,CAACI,OAAhB,EAAyB;MACvBJ,UAAU,CAACI,OAAX,GAAqBC,MAAM,CAACC,UAAP,CAAkB,MAAM;QAC3CV,QAAQ,CAACO,cAAD,CAAR;QACAH,UAAU,CAACI,OAAX,GAAqB,IAArB;MACD,CAHoB,EAGlBP,KAHkB,CAArB;IAID;EACF,CAPD;;EAQA,MAAMU,KAAK,GAAG,MAAM;IAClB,IAAIP,UAAU,CAACI,OAAf,EAAwB;MACtBC,MAAM,CAACG,YAAP,CAAoBR,UAAU,CAACI,OAA/B;MACAJ,UAAU,CAACI,OAAX,GAAqB,IAArB;IACD;EACF,CALD;;EAMAK,SAAS,CAAC,MAAM;IACd,IAAIX,OAAO,CAACC,UAAZ,EAAwB;MACtBG,KAAK;IACN;;IACD,OAAOK,KAAP;EACD,CALQ,EAKN,CAACV,KAAD,CALM,CAAT;EAMA,OAAO;IAAEK,KAAF;IAASK;EAAT,CAAP;AACF","names":["useTimeout","callback","delay","options","autoInvoke","timeoutRef","useRef","start","callbackParams","current","window","setTimeout","clear","clearTimeout","useEffect"],"sources":["D:\\forum-system-with-react-novu-node\\client\\node_modules\\@mantine\\hooks\\src\\use-timeout\\use-timeout.ts"],"sourcesContent":["import { useRef, useEffect } from 'react';\n\nexport function useTimeout(\n  callback: (...callbackParams: any[]) => void,\n  delay: number,\n  options: { autoInvoke: boolean } = { autoInvoke: false }\n) {\n  const timeoutRef = useRef<number>(null);\n\n  const start = (...callbackParams: any[]) => {\n    if (!timeoutRef.current) {\n      timeoutRef.current = window.setTimeout(() => {\n        callback(callbackParams);\n        timeoutRef.current = null;\n      }, delay);\n    }\n  };\n\n  const clear = () => {\n    if (timeoutRef.current) {\n      window.clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (options.autoInvoke) {\n      start();\n    }\n\n    return clear;\n  }, [delay]);\n\n  return { start, clear };\n}\n"]},"metadata":{},"sourceType":"module"}