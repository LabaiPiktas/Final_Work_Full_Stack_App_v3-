{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Instrument\\u0173 skyrius\\\\Final_Work_Full_Stack_App_v3-\\\\Final_Work_Full_Stack_App_v3-\\\\client\\\\src\\\\components\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Likes from \"../utils/Likes\";\nimport Comments from \"../utils/Comments\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport Nav from \"./Nav\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [sortByDate, setSortByDate] = useState(false);\n  const [sortByAnswerCount, setSortByAnswerCount] = useState(false);\n  const [sortOrder, setSortOrder] = useState(\"asc\");\n  const [showAnsweredQuestions, setShowAnsweredQuestions] = useState(false);\n  const [showAllQuestions, setShowAllQuestions] = useState(false);\n  const [sortedThreads, setSortedThreads] = useState([]);\n  const [thread, setThread] = useState({\n    text: \"\"\n  });\n  const [threadList, setThreadList] = useState([]);\n  const [refresh, setRefresh] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const checkUser = () => {\n      if (!localStorage.getItem(\"_id\")) {\n        navigate(\"/\");\n      } else {\n        fetch(\"http://localhost:4000/api/all/threads\").then(res => res.json()).then(data => {\n          setThreadList(data.threads);\n          filterThreads(data.threads);\n        }).catch(err => console.error(err));\n      }\n    };\n    checkUser();\n  }, [navigate, refresh]);\n  useEffect(() => {\n    // Sort threads based on the selected options\n    let sortedThreads = [...threadList];\n    if (showAnsweredQuestions && !showAllQuestions) {\n      sortedThreads = sortedThreads.filter(thread => thread.replies.length > 0);\n    } else if (!showAnsweredQuestions && !showAllQuestions) {\n      sortedThreads = sortedThreads.filter(thread => thread.replies.length === 0);\n    }\n    if (sortByDate) {\n      sortedThreads.sort((a, b) => {\n        const dateA = new Date(a.timestamp);\n        const dateB = new Date(b.timestamp);\n        if (sortOrder === \"asc\") {\n          return dateA - dateB;\n        } else {\n          return dateB - dateA;\n        }\n      });\n    }\n    if (sortByAnswerCount) {\n      sortedThreads.sort((a, b) => {\n        if (sortOrder === \"asc\") {\n          return a.replies.length - b.replies.length;\n        } else {\n          return b.replies.length - a.replies.length;\n        }\n      });\n    }\n    setSortedThreads(sortedThreads);\n  }, [threadList, sortByDate, sortByAnswerCount, sortOrder, showAnsweredQuestions, showAllQuestions]);\n  const handleSortByDate = () => {\n    setSortByDate(true);\n    setSortByAnswerCount(false);\n  };\n  const handleSortByAnswerCount = () => {\n    setSortByDate(false);\n    setSortByAnswerCount(true);\n  };\n  const handleSortOrder = order => {\n    setSortOrder(order);\n  };\n  const filterThreads = threads => {\n    const answeredThreads = threads.filter(thread => thread.replies.length > 0);\n    const unansweredThreads = threads.filter(thread => thread.replies.length === 0);\n    let filteredThreads = [];\n    if (showAnsweredQuestions && !showAllQuestions) {\n      filteredThreads = answeredThreads;\n    } else if (!showAnsweredQuestions && !showAllQuestions) {\n      filteredThreads = unansweredThreads;\n    } else {\n      filteredThreads = threads;\n    }\n    setSortedThreads(filteredThreads);\n  };\n  const handleToggleQuestions = () => {\n    if (showAllQuestions) {\n      setShowAnsweredQuestions(false);\n      setShowAllQuestions(false);\n    } else if (showAnsweredQuestions) {\n      setShowAnsweredQuestions(false);\n      setShowAllQuestions(true);\n    } else {\n      setShowAnsweredQuestions(true);\n      setShowAllQuestions(false);\n    }\n  };\n  const createThread = () => {\n    fetch(\"http://localhost:4000/api/create/thread\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        thread: thread.text,\n        userId: localStorage.getItem(\"_id\"),\n        replies: []\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(data => {\n      setRefresh(prevRefresh => !prevRefresh);\n      setThread({\n        text: \"\"\n      });\n      alert(data.message);\n    }).catch(err => console.error(err));\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    createThread();\n  };\n  const deleteThread = threadId => {\n    fetch(`http://localhost:4000/api/delete/thread/${threadId}`, {\n      method: \"DELETE\"\n    }).then(res => res.json()).then(data => {\n      setThreadList(prevThreadList => prevThreadList.filter(thread => thread.id !== threadId));\n      alert(data.message);\n    }).catch(error => {\n      console.error(\"Error deleting thread:\", error);\n    });\n  };\n  const handleEdit = threadId => {\n    const newText = prompt(\"Enter the new text:\");\n    if (newText) {\n      editThread(threadId, newText);\n    }\n  };\n  const editThread = (threadId, newText) => {\n    fetch(`http://localhost:4000/api/edit/thread/${threadId}`, {\n      method: \"PUT\",\n      body: JSON.stringify({\n        newText\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(data => {\n      if (data.thread) {\n        const updatedThreadList = threadList.map(thread => thread.id === threadId ? data.thread : thread);\n        setThreadList(updatedThreadList);\n        setRefresh(prevRefresh => !prevRefresh);\n        alert(\"Thread edited successfully!\");\n      } else {\n        throw new Error(data.error_message);\n      }\n    }).catch(error => {\n      console.error(\"Error editing thread:\", error);\n    });\n  };\n  const handleButtonClick = () => {\n    // Functionality to be executed when the button is clicked\n    console.log(\"Button Clicked!\");\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"home\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"homeTitle\",\n        children: \"Create a Thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"homeForm\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"home__container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"thread\",\n            children: \"Title / Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"thread\",\n            required: true,\n            value: thread.text,\n            onChange: e => setThread({\n              ...thread,\n              text: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"homeBtn\",\n          children: \"CREATE THREAD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/question-list\",\n        className: \"modalBtn\",\n        children: \"Go to Question List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"thread__container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sort__buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSortByDate,\n            className: sortByDate ? \"modalBtn active\" : \"modalBtn\",\n            children: \"Sort by Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSortByAnswerCount,\n            className: sortByAnswerCount ? \"modalBtn active\" : \"modalBtn\",\n            children: \"Sort by Answer Count\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSortOrder(\"asc\"),\n            className: sortOrder === \"asc\" ? \"modalBtn active\" : \"modalBtn\",\n            children: \"Ascending Order\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSortOrder(\"desc\"),\n            className: sortOrder === \"desc\" ? \"modalBtn active\" : \"modalBtn\",\n            children: \"Descending Order\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleToggleQuestions,\n            className: \"modalBtn\",\n            children: showAllQuestions ? \"Show Answered and Unanswered Questions\" : showAnsweredQuestions ? \"Show Unanswered Questions\" : \"Show Answered Questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), sortedThreads.length > 0 && sortedThreads.map(thread => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"thread__item\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: thread.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"react__container\",\n            children: [/*#__PURE__*/_jsxDEV(Likes, {\n              numberOfLikes: thread.likes.length,\n              threadId: thread.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Comments, {\n              numberOfComments: thread.replies.length,\n              threadId: thread.id,\n              title: thread.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 19\n            }, this), localStorage.getItem(\"_id\") && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"modalBtn\",\n                onClick: () => deleteThread(thread.id),\n                children: \"Delete Thread\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"modalBtn\",\n                onClick: () => handleEdit(thread.id),\n                children: \"Edit Thread\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 17\n          }, this)]\n        }, thread.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Home, \"YR60/S5/u8AdXBpDT9gLNASXljE=\", false, function () {\n  return [useNavigate];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Likes","Comments","useNavigate","Link","Nav","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","sortByDate","setSortByDate","sortByAnswerCount","setSortByAnswerCount","sortOrder","setSortOrder","showAnsweredQuestions","setShowAnsweredQuestions","showAllQuestions","setShowAllQuestions","sortedThreads","setSortedThreads","thread","setThread","text","threadList","setThreadList","refresh","setRefresh","navigate","checkUser","localStorage","getItem","fetch","then","res","json","data","threads","filterThreads","catch","err","console","error","filter","replies","length","sort","a","b","dateA","Date","timestamp","dateB","handleSortByDate","handleSortByAnswerCount","handleSortOrder","order","answeredThreads","unansweredThreads","filteredThreads","handleToggleQuestions","createThread","method","body","JSON","stringify","userId","headers","prevRefresh","alert","message","handleSubmit","e","preventDefault","deleteThread","threadId","prevThreadList","id","handleEdit","newText","prompt","editThread","updatedThreadList","map","Error","error_message","handleButtonClick","log","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","htmlFor","type","name","required","value","onChange","target","to","onClick","title","numberOfLikes","likes","numberOfComments","_c","$RefreshReg$"],"sources":["C:/Users/Instrumentų skyrius/Final_Work_Full_Stack_App_v3-/Final_Work_Full_Stack_App_v3-/client/src/components/Home.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Likes from \"../utils/Likes\";\r\nimport Comments from \"../utils/Comments\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport Nav from \"./Nav\";\r\n\r\nconst Home = () => {\r\n  const [sortByDate, setSortByDate] = useState(false);\r\n  const [sortByAnswerCount, setSortByAnswerCount] = useState(false);\r\n  const [sortOrder, setSortOrder] = useState(\"asc\");\r\n  const [showAnsweredQuestions, setShowAnsweredQuestions] = useState(false);\r\n  const [showAllQuestions, setShowAllQuestions] = useState(false);\r\n  const [sortedThreads, setSortedThreads] = useState([]);\r\n  const [thread, setThread] = useState({ text: \"\" });\r\n  const [threadList, setThreadList] = useState([]);\r\n  const [refresh, setRefresh] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const checkUser = () => {\r\n      if (!localStorage.getItem(\"_id\")) {\r\n        navigate(\"/\");\r\n      } else {\r\n        fetch(\"http://localhost:4000/api/all/threads\")\r\n          .then((res) => res.json())\r\n          .then((data) => {\r\n            setThreadList(data.threads);\r\n            filterThreads(data.threads);\r\n          })\r\n          .catch((err) => console.error(err));\r\n      }\r\n    };\r\n    checkUser();\r\n  }, [navigate, refresh]);\r\n\r\n  useEffect(() => {\r\n    // Sort threads based on the selected options\r\n    let sortedThreads = [...threadList];\r\n\r\n    if (showAnsweredQuestions && !showAllQuestions) {\r\n      sortedThreads = sortedThreads.filter(\r\n        (thread) => thread.replies.length > 0\r\n      );\r\n    } else if (!showAnsweredQuestions && !showAllQuestions) {\r\n      sortedThreads = sortedThreads.filter(\r\n        (thread) => thread.replies.length === 0\r\n      );\r\n    }\r\n\r\n    if (sortByDate) {\r\n      sortedThreads.sort((a, b) => {\r\n        const dateA = new Date(a.timestamp);\r\n        const dateB = new Date(b.timestamp);\r\n\r\n        if (sortOrder === \"asc\") {\r\n          return dateA - dateB;\r\n        } else {\r\n          return dateB - dateA;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (sortByAnswerCount) {\r\n      sortedThreads.sort((a, b) => {\r\n        if (sortOrder === \"asc\") {\r\n          return a.replies.length - b.replies.length;\r\n        } else {\r\n          return b.replies.length - a.replies.length;\r\n        }\r\n      });\r\n    }\r\n\r\n    setSortedThreads(sortedThreads);\r\n  }, [\r\n    threadList,\r\n    sortByDate,\r\n    sortByAnswerCount,\r\n    sortOrder,\r\n    showAnsweredQuestions,\r\n    showAllQuestions,\r\n  ]);\r\n\r\n  const handleSortByDate = () => {\r\n    setSortByDate(true);\r\n    setSortByAnswerCount(false);\r\n  };\r\n\r\n  const handleSortByAnswerCount = () => {\r\n    setSortByDate(false);\r\n    setSortByAnswerCount(true);\r\n  };\r\n\r\n  const handleSortOrder = (order) => {\r\n    setSortOrder(order);\r\n  };\r\n\r\n  const filterThreads = (threads) => {\r\n    const answeredThreads = threads.filter((thread) => thread.replies.length > 0);\r\n    const unansweredThreads = threads.filter(\r\n      (thread) => thread.replies.length === 0\r\n    );\r\n    let filteredThreads = [];\r\n    if (showAnsweredQuestions && !showAllQuestions) {\r\n      filteredThreads = answeredThreads;\r\n    } else if (!showAnsweredQuestions && !showAllQuestions) {\r\n      filteredThreads = unansweredThreads;\r\n    } else {\r\n      filteredThreads = threads;\r\n    }\r\n    setSortedThreads(filteredThreads);\r\n  };\r\n\r\n  const handleToggleQuestions = () => {\r\n    if (showAllQuestions) {\r\n      setShowAnsweredQuestions(false);\r\n      setShowAllQuestions(false);\r\n    } else if (showAnsweredQuestions) {\r\n      setShowAnsweredQuestions(false);\r\n      setShowAllQuestions(true);\r\n    } else {\r\n      setShowAnsweredQuestions(true);\r\n      setShowAllQuestions(false);\r\n    }\r\n  };\r\n\r\n  const createThread = () => {\r\n    fetch(\"http://localhost:4000/api/create/thread\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        thread: thread.text,\r\n        userId: localStorage.getItem(\"_id\"),\r\n        replies: [],\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setRefresh((prevRefresh) => !prevRefresh);\r\n        setThread({ text: \"\" });\r\n        alert(data.message);\r\n      })\r\n      .catch((err) => console.error(err));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    createThread();\r\n  };\r\n\r\n  const deleteThread = (threadId) => {\r\n    fetch(`http://localhost:4000/api/delete/thread/${threadId}`, {\r\n      method: \"DELETE\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setThreadList((prevThreadList) =>\r\n          prevThreadList.filter((thread) => thread.id !== threadId)\r\n        );\r\n        alert(data.message);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error deleting thread:\", error);\r\n      });\r\n  };\r\n\r\n  const handleEdit = (threadId) => {\r\n    const newText = prompt(\"Enter the new text:\");\r\n    if (newText) {\r\n      editThread(threadId, newText);\r\n    }\r\n  };\r\n\r\n  const editThread = (threadId, newText) => {\r\n    fetch(`http://localhost:4000/api/edit/thread/${threadId}`, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify({\r\n        newText,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.thread) {\r\n          const updatedThreadList = threadList.map((thread) =>\r\n            thread.id === threadId ? data.thread : thread\r\n          );\r\n          setThreadList(updatedThreadList);\r\n          setRefresh((prevRefresh) => !prevRefresh);\r\n          alert(\"Thread edited successfully!\");\r\n        } else {\r\n          throw new Error(data.error_message);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error editing thread:\", error);\r\n      });\r\n  };\r\n\r\n  const handleButtonClick = () => {\r\n    // Functionality to be executed when the button is clicked\r\n    console.log(\"Button Clicked!\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Nav />\r\n      <main className=\"home\">\r\n        <h2 className=\"homeTitle\">Create a Thread</h2>\r\n        <form className=\"homeForm\" onSubmit={handleSubmit}>\r\n          <div className=\"home__container\">\r\n            <label htmlFor=\"thread\">Title / Description</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"thread\"\r\n              required\r\n              value={thread.text}\r\n              onChange={(e) => setThread({ ...thread, text: e.target.value })}\r\n            />\r\n          </div>\r\n          <button className=\"homeBtn\">CREATE THREAD</button>\r\n        </form>\r\n        <Link to=\"/question-list\" className=\"modalBtn\">\r\n          Go to Question List\r\n        </Link>\r\n        <div className=\"thread__container\">\r\n          <div className=\"sort__buttons\">\r\n            <button\r\n              onClick={handleSortByDate}\r\n              className={sortByDate ? \"modalBtn active\" : \"modalBtn\"}\r\n            >\r\n              Sort by Date\r\n            </button>\r\n            <button\r\n              onClick={handleSortByAnswerCount}\r\n              className={sortByAnswerCount ? \"modalBtn active\" : \"modalBtn\"}\r\n            >\r\n              Sort by Answer Count\r\n            </button>\r\n            <button\r\n              onClick={() => handleSortOrder(\"asc\")}\r\n              className={sortOrder === \"asc\" ? \"modalBtn active\" : \"modalBtn\"}\r\n            >\r\n              Ascending Order\r\n            </button>\r\n            <button\r\n              onClick={() => handleSortOrder(\"desc\")}\r\n              className={sortOrder === \"desc\" ? \"modalBtn active\" : \"modalBtn\"}\r\n            >\r\n              Descending Order\r\n            </button>\r\n            <button\r\n              onClick={handleToggleQuestions}\r\n              className=\"modalBtn\"\r\n            >\r\n              {showAllQuestions\r\n                ? \"Show Answered and Unanswered Questions\"\r\n                : showAnsweredQuestions\r\n                ? \"Show Unanswered Questions\"\r\n                : \"Show Answered Questions\"}\r\n            </button>\r\n          </div>\r\n          {sortedThreads.length > 0 &&\r\n            sortedThreads.map((thread) => (\r\n              <div className=\"thread__item\" key={thread.id}>\r\n                <p>{thread.title}</p>\r\n                <div className=\"react__container\">\r\n                  <Likes\r\n                    numberOfLikes={thread.likes.length}\r\n                    threadId={thread.id}\r\n                  />\r\n                  <Comments\r\n                    numberOfComments={thread.replies.length}\r\n                    threadId={thread.id}\r\n                    title={thread.title}\r\n                  />\r\n                  {localStorage.getItem(\"_id\") && (\r\n                    <>\r\n                      <button\r\n                        className=\"modalBtn\"\r\n                        onClick={() => deleteThread(thread.id)}\r\n                      >\r\n                        Delete Thread\r\n                      </button>\r\n                      <button\r\n                        className=\"modalBtn\"\r\n                        onClick={() => handleEdit(thread.id)}\r\n                      >\r\n                        Edit Thread\r\n                      </button>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}