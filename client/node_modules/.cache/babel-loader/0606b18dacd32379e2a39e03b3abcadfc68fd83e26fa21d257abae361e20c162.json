{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\man_t\\\\OneDrive\\\\dokumentai\\\\GitHub\\\\Final_Work_Full_Stack_App_v3-\\\\client\\\\src\\\\components\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Likes from \"../utils/Likes\";\nimport Comments from \"../utils/Comments\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport Nav from \"./Nav\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [thread, setThread] = useState({\n    text: \"\"\n  });\n  const [threadList, setThreadList] = useState([]);\n  const [refresh, setRefresh] = useState(false);\n  const [editedThreads, setEditedThreads] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const checkUser = () => {\n      if (!localStorage.getItem(\"_id\")) {\n        navigate(\"/\");\n      } else {\n        fetch(\"http://localhost:4000/api/all/threads\").then(res => res.json()).then(data => setThreadList(data.threads)).catch(err => console.error(err));\n      }\n    };\n    checkUser();\n  }, [navigate, refresh]);\n  const createThread = () => {\n    fetch(\"http://localhost:4000/api/create/thread\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        thread: thread.text,\n        userId: localStorage.getItem(\"_id\"),\n        replies: [],\n        edited: false\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(data => {\n      alert(data.message);\n      setRefresh(prevRefresh => !prevRefresh);\n      setThread({\n        text: \"\"\n      });\n    }).catch(err => console.error(err));\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    createThread();\n  };\n  const deleteThread = threadId => {\n    fetch(`http://localhost:4000/api/delete/thread/${threadId}`, {\n      method: \"DELETE\"\n    }).then(res => res.json()).then(data => {\n      alert(data.message);\n      setThreadList(prevThreadList => prevThreadList.filter(thread => thread.id !== threadId));\n    }).catch(error => {\n      console.error(\"Error deleting thread:\", error);\n    });\n  };\n  const handleEdit = threadId => {\n    const newText = prompt(\"Enter the new text:\");\n    if (newText) {\n      editThread(threadId, newText);\n      setEditedThreads(prevEditedThreads => [...prevEditedThreads, threadId]);\n    }\n  };\n  const editThread = (threadId, newText) => {\n    fetch(`http://localhost:4000/api/edit/thread/${threadId}`, {\n      method: \"PUT\",\n      body: JSON.stringify({\n        newText\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(data => {\n      if (data.thread) {\n        const updatedThreadList = threadList.map(thread => thread.id === threadId ? {\n          ...data.thread,\n          edited: true\n        } : thread);\n        setThreadList(updatedThreadList);\n        alert(\"Thread edited successfully!\");\n        setRefresh(prevRefresh => !prevRefresh);\n      } else {\n        throw new Error(data.error_message);\n      }\n    }).catch(error => {\n      console.error(\"Error editing thread:\", error);\n    });\n  };\n  useEffect(() => {\n    const fetchThread = async threadId => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/thread/${threadId}`);\n        const data = await response.json();\n        const updatedThreadList = threadList.map(thread => thread.id === threadId ? data.thread : thread);\n        setThreadList(updatedThreadList);\n      } catch (error) {\n        console.error(\"Error fetching thread:\", error);\n      }\n    };\n    editedThreads.forEach(editedThread => {\n      fetchThread(editedThread);\n    });\n  }, [threadList, editedThreads]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"home\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"homeTitle\",\n        children: \"Create a Thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"homeForm\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"home__container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"thread\",\n            children: \"Title / Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"thread\",\n            required: true,\n            value: thread.text,\n            onChange: e => setThread({\n              ...thread,\n              text: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"homeBtn\",\n          children: \"CREATE THREAD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/question-list\",\n        className: \"modalBtn\",\n        children: \"Go to Question List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"thread__container\",\n        children: threadList.length > 0 && threadList.map(thread => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `thread__item ${thread.edited ? \"edited\" : \"\"}`,\n          children: [\" \", \"window.location.reload(); // Refresh the page\", /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: editedThreads.includes(thread.id) ? \"lightgray\" : \"inherit\"\n            },\n            children: thread.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"react__container\",\n            children: [/*#__PURE__*/_jsxDEV(Likes, {\n              numberOfLikes: thread.likes.length,\n              threadId: thread.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Comments, {\n              numberOfComments: thread.replies.length,\n              threadId: thread.id,\n              title: thread.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 19\n            }, this), localStorage.getItem(\"_id\") && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"modalBtn\",\n                onClick: () => deleteThread(thread.id),\n                children: \"Delete Thread\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 23\n              }, this), !thread.edited && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"modalBtn\",\n                onClick: () => handleEdit(thread.id),\n                children: \"Edit Thread\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 17\n          }, this)]\n        }, thread.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Home, \"/lUP7LRPNweDzehEEPSxaH+nFB4=\", false, function () {\n  return [useNavigate];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Likes","Comments","useNavigate","Link","Nav","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","thread","setThread","text","threadList","setThreadList","refresh","setRefresh","editedThreads","setEditedThreads","navigate","checkUser","localStorage","getItem","fetch","then","res","json","data","threads","catch","err","console","error","createThread","method","body","JSON","stringify","userId","replies","edited","headers","alert","message","prevRefresh","handleSubmit","e","preventDefault","deleteThread","threadId","prevThreadList","filter","id","handleEdit","newText","prompt","editThread","prevEditedThreads","updatedThreadList","map","Error","error_message","fetchThread","response","forEach","editedThread","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","htmlFor","type","name","required","value","onChange","target","to","length","style","color","includes","title","numberOfLikes","likes","numberOfComments","onClick","_c","$RefreshReg$"],"sources":["C:/Users/man_t/OneDrive/dokumentai/GitHub/Final_Work_Full_Stack_App_v3-/client/src/components/Home.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Likes from \"../utils/Likes\";\nimport Comments from \"../utils/Comments\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport Nav from \"./Nav\";\n\nconst Home = () => {\n  const [thread, setThread] = useState({ text: \"\" });\n  const [threadList, setThreadList] = useState([]);\n  const [refresh, setRefresh] = useState(false);\n  const [editedThreads, setEditedThreads] = useState([]);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const checkUser = () => {\n      if (!localStorage.getItem(\"_id\")) {\n        navigate(\"/\");\n      } else {\n        fetch(\"http://localhost:4000/api/all/threads\")\n          .then((res) => res.json())\n          .then((data) => setThreadList(data.threads))\n          .catch((err) => console.error(err));\n      }\n    };\n    checkUser();\n  }, [navigate, refresh]);\n\n  const createThread = () => {\n    fetch(\"http://localhost:4000/api/create/thread\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        thread: thread.text,\n        userId: localStorage.getItem(\"_id\"),\n        replies: [],\n        edited: false,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        alert(data.message);\n        setRefresh((prevRefresh) => !prevRefresh);\n        setThread({ text: \"\" });\n      })\n      .catch((err) => console.error(err));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    createThread();\n  };\n\n  const deleteThread = (threadId) => {\n    fetch(`http://localhost:4000/api/delete/thread/${threadId}`, {\n      method: \"DELETE\",\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        alert(data.message);\n        setThreadList((prevThreadList) =>\n          prevThreadList.filter((thread) => thread.id !== threadId)\n        );\n      })\n      .catch((error) => {\n        console.error(\"Error deleting thread:\", error);\n      });\n  };\n\n  const handleEdit = (threadId) => {\n    const newText = prompt(\"Enter the new text:\");\n    if (newText) {\n      editThread(threadId, newText);\n      setEditedThreads((prevEditedThreads) => [...prevEditedThreads, threadId]);\n    }\n  };\n\n  const editThread = (threadId, newText) => {\n    fetch(`http://localhost:4000/api/edit/thread/${threadId}`, {\n      method: \"PUT\",\n      body: JSON.stringify({\n        newText,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.thread) {\n          const updatedThreadList = threadList.map((thread) =>\n            thread.id === threadId ? { ...data.thread, edited: true } : thread\n          );\n          setThreadList(updatedThreadList);\n          alert(\"Thread edited successfully!\");\n          setRefresh((prevRefresh) => !prevRefresh);\n        } else {\n          throw new Error(data.error_message);\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error editing thread:\", error);\n      });\n  };\n\n  useEffect(() => {\n    const fetchThread = async (threadId) => {\n      try {\n        const response = await fetch(\n          `http://localhost:4000/api/thread/${threadId}`\n        );\n        const data = await response.json();\n        const updatedThreadList = threadList.map((thread) =>\n          thread.id === threadId ? data.thread : thread\n        );\n        setThreadList(updatedThreadList);\n      } catch (error) {\n        console.error(\"Error fetching thread:\", error);\n      }\n    };\n\n    editedThreads.forEach((editedThread) => {\n      fetchThread(editedThread);\n    });\n  }, [threadList, editedThreads]);\n\n  return (\n    <>\n      <Nav />\n      <main className=\"home\">\n        <h2 className=\"homeTitle\">Create a Thread</h2>\n        <form className=\"homeForm\" onSubmit={handleSubmit}>\n          <div className=\"home__container\">\n            <label htmlFor=\"thread\">Title / Description</label>\n            <input\n              type=\"text\"\n              name=\"thread\"\n              required\n              value={thread.text}\n              onChange={(e) => setThread({ ...thread, text: e.target.value })}\n            />\n          </div>\n          <button className=\"homeBtn\">CREATE THREAD</button>\n        </form>\n        <Link to=\"/question-list\" className=\"modalBtn\">\n          Go to Question List\n        </Link>\n        <div className=\"thread__container\">\n          {threadList.length > 0 &&\n            threadList.map((thread) => (\n              <div\n                className={`thread__item ${thread.edited ? \"edited\" : \"\"}`}\n                key={thread.id}\n              >\n                {\" \"}\n                window.location.reload(); // Refresh the page\n                <p\n                  style={{\n                    color: editedThreads.includes(thread.id)\n                      ? \"lightgray\"\n                      : \"inherit\",\n                  }}\n                >\n                  {thread.title}\n                </p>\n                <div className=\"react__container\">\n                  <Likes\n                    numberOfLikes={thread.likes.length}\n                    threadId={thread.id}\n                  />\n                  <Comments\n                    numberOfComments={thread.replies.length}\n                    threadId={thread.id}\n                    title={thread.title}\n                  />\n                  {localStorage.getItem(\"_id\") && (\n                    <>\n                      <button\n                        className=\"modalBtn\"\n                        onClick={() => deleteThread(thread.id)}\n                      >\n                        Delete Thread\n                      </button>\n                      {!thread.edited && (\n                        <button\n                          className=\"modalBtn\"\n                          onClick={() => handleEdit(thread.id)}\n                        >\n                          Edit Thread\n                        </button>\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n            ))}\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}