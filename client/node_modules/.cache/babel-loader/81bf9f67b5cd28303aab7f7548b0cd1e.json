{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nfunction round(number) {\n  let digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let base = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10 ** digits;\n  return Math.round(base * number) / base;\n}\n\nfunction hslaToHsva(_ref) {\n  let {\n    h,\n    s,\n    l,\n    a\n  } = _ref;\n  const ss = s * ((l < 50 ? l : 100 - l) / 100);\n  return {\n    h,\n    s: ss > 0 ? 2 * ss / (l + ss) * 100 : 0,\n    v: l + ss,\n    a\n  };\n}\n\nconst angleUnits = {\n  grad: 360 / 400,\n  turn: 360,\n  rad: 360 / (Math.PI * 2)\n};\n\nfunction parseHue(value) {\n  let unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"deg\";\n  return Number(value) * (angleUnits[unit] || 1);\n}\n\nconst HSL_REGEXP = /hsla?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n\nfunction parseHsla(color) {\n  const match = HSL_REGEXP.exec(color);\n\n  if (!match) {\n    return {\n      h: 0,\n      s: 0,\n      v: 0,\n      a: 1\n    };\n  }\n\n  return hslaToHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    l: Number(match[4]),\n    a: match[5] === void 0 ? 1 : Number(match[5]) / (match[6] ? 100 : 1)\n  });\n}\n\nfunction rgbaToHsva(_ref2) {\n  let {\n    r,\n    g,\n    b,\n    a\n  } = _ref2;\n  const max = Math.max(r, g, b);\n  const delta = max - Math.min(r, g, b);\n  const hh = delta ? max === r ? (g - b) / delta : max === g ? 2 + (b - r) / delta : 4 + (r - g) / delta : 0;\n  return {\n    h: round(60 * (hh < 0 ? hh + 6 : hh)),\n    s: round(max ? delta / max * 100 : 0),\n    v: round(max / 255 * 100),\n    a\n  };\n}\n\nfunction parseHex(color) {\n  const hex = color[0] === \"#\" ? color.slice(1) : color;\n\n  if (hex.length === 3) {\n    return rgbaToHsva({\n      r: parseInt(hex[0] + hex[0], 16),\n      g: parseInt(hex[1] + hex[1], 16),\n      b: parseInt(hex[2] + hex[2], 16),\n      a: 1\n    });\n  }\n\n  return rgbaToHsva({\n    r: parseInt(hex.slice(0, 2), 16),\n    g: parseInt(hex.slice(2, 4), 16),\n    b: parseInt(hex.slice(4, 6), 16),\n    a: 1\n  });\n}\n\nfunction parseHexa(color) {\n  const hex = color[0] === \"#\" ? color.slice(1) : color;\n\n  const roundA = a2 => Math.round(parseInt(a2, 16) / 255 * 100) / 100;\n\n  if (hex.length === 4) {\n    const withoutOpacity2 = hex.slice(0, 3);\n    const a2 = roundA(hex[3] + hex[3]);\n\n    const hsvaColor2 = __spreadProps(__spreadValues({}, parseHex(withoutOpacity2)), {\n      a: a2\n    });\n\n    return hsvaColor2;\n  }\n\n  const withoutOpacity = hex.slice(0, 6);\n  const a = roundA(hex.slice(6, 8));\n\n  const hsvaColor = __spreadProps(__spreadValues({}, parseHex(withoutOpacity)), {\n    a\n  });\n\n  return hsvaColor;\n}\n\nconst RGB_REGEXP = /rgba?\\(?\\s*(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n\nfunction parseRgba(color) {\n  const match = RGB_REGEXP.exec(color);\n\n  if (!match) {\n    return {\n      h: 0,\n      s: 0,\n      v: 0,\n      a: 1\n    };\n  }\n\n  return rgbaToHsva({\n    r: Number(match[1]) / (match[2] ? 100 / 255 : 1),\n    g: Number(match[3]) / (match[4] ? 100 / 255 : 1),\n    b: Number(match[5]) / (match[6] ? 100 / 255 : 1),\n    a: match[7] === void 0 ? 1 : Number(match[7]) / (match[8] ? 100 : 1)\n  });\n}\n\nconst VALIDATION_REGEXP = {\n  hex: /^#?([0-9A-F]{3}){1,2}$/i,\n  hexa: /^#?([0-9A-F]{4}){1,2}$/i,\n  rgb: /^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/i,\n  rgba: /^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/i,\n  hsl: /hsl\\(\\s*(\\d+)\\s*,\\s*(\\d+(?:\\.\\d+)?%)\\s*,\\s*(\\d+(?:\\.\\d+)?%)\\)/i,\n  hsla: /^hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%,\\s*(\\d*(?:\\.\\d+)?)\\)$/i\n};\nconst CONVERTERS = {\n  hex: parseHex,\n  hexa: parseHexa,\n  rgb: parseRgba,\n  rgba: parseRgba,\n  hsl: parseHsla,\n  hsla: parseHsla\n};\n\nfunction isColorValid(color) {\n  for (const [, regexp] of Object.entries(VALIDATION_REGEXP)) {\n    if (regexp.test(color)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction parseColor(color) {\n  if (typeof color !== \"string\") {\n    return {\n      h: 0,\n      s: 0,\n      v: 0,\n      a: 1\n    };\n  }\n\n  if (color === \"transparent\") {\n    return {\n      h: 0,\n      s: 0,\n      v: 0,\n      a: 0\n    };\n  }\n\n  const trimmed = color.trim();\n\n  for (const [rule, regexp] of Object.entries(VALIDATION_REGEXP)) {\n    if (regexp.test(trimmed)) {\n      return CONVERTERS[rule](trimmed);\n    }\n  }\n\n  return {\n    h: 0,\n    s: 0,\n    v: 0,\n    a: 1\n  };\n}\n\nexport { isColorValid, parseColor, parseHex, parseHexa, parseHsla, parseHue, parseRgba, round };","map":{"version":3,"mappings":"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","names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","round","number","digits","base","Math","hslaToHsva","h","s","l","ss","v","angleUnits","grad","turn","rad","PI","parseHue","unit","Number","HSL_REGEXP","parseHsla","color","match","exec","rgbaToHsva","r","g","max","delta","min","hh","parseHex","hex","slice","length","parseInt","parseHexa","roundA","a2","withoutOpacity2","hsvaColor2","withoutOpacity","hsvaColor","RGB_REGEXP","parseRgba","VALIDATION_REGEXP","hexa","rgb","rgba","hsl","hsla","CONVERTERS","isColorValid","regexp","entries","test","parseColor","trimmed","trim","rule"],"sources":["D:\\forum-system-with-react-novu-node\\client\\node_modules\\@mantine\\core\\src\\ColorPicker\\converters\\parsers.ts"],"sourcesContent":["import { HsvaColor, RgbaColor, ColorFormat } from '../types';\n\nexport function round(number: number, digits = 0, base = 10 ** digits) {\n  return Math.round(base * number) / base;\n}\n\nfunction hslaToHsva({ h, s, l, a }): HsvaColor {\n  const ss = s * ((l < 50 ? l : 100 - l) / 100);\n\n  return {\n    h,\n    s: ss > 0 ? ((2 * ss) / (l + ss)) * 100 : 0,\n    v: l + ss,\n    a,\n  };\n}\n\nconst angleUnits: Record<string, number> = {\n  grad: 360 / 400,\n  turn: 360,\n  rad: 360 / (Math.PI * 2),\n};\n\nexport function parseHue(value: string, unit = 'deg') {\n  return Number(value) * (angleUnits[unit] || 1);\n}\n\nconst HSL_REGEXP =\n  /hsla?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n\nexport function parseHsla(color: string): HsvaColor {\n  const match = HSL_REGEXP.exec(color);\n\n  if (!match) {\n    return { h: 0, s: 0, v: 0, a: 1 };\n  }\n\n  return hslaToHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    l: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1),\n  });\n}\n\nfunction rgbaToHsva({ r, g, b, a }: RgbaColor): HsvaColor {\n  const max = Math.max(r, g, b);\n  const delta = max - Math.min(r, g, b);\n\n  const hh = delta\n    ? max === r\n      ? (g - b) / delta\n      : max === g\n      ? 2 + (b - r) / delta\n      : 4 + (r - g) / delta\n    : 0;\n\n  return {\n    h: round(60 * (hh < 0 ? hh + 6 : hh)),\n    s: round(max ? (delta / max) * 100 : 0),\n    v: round((max / 255) * 100),\n    a,\n  };\n}\n\nexport function parseHex(color: string): HsvaColor {\n  const hex = color[0] === '#' ? color.slice(1) : color;\n\n  if (hex.length === 3) {\n    return rgbaToHsva({\n      r: parseInt(hex[0] + hex[0], 16),\n      g: parseInt(hex[1] + hex[1], 16),\n      b: parseInt(hex[2] + hex[2], 16),\n      a: 1,\n    });\n  }\n\n  return rgbaToHsva({\n    r: parseInt(hex.slice(0, 2), 16),\n    g: parseInt(hex.slice(2, 4), 16),\n    b: parseInt(hex.slice(4, 6), 16),\n    a: 1,\n  });\n}\n\nexport function parseHexa(color: string): HsvaColor {\n  const hex = color[0] === '#' ? color.slice(1) : color;\n\n  const roundA = (a: string) => Math.round((parseInt(a, 16) / 255) * 100) / 100;\n  if (hex.length === 4) {\n    const withoutOpacity = hex.slice(0, 3);\n    const a = roundA(hex[3] + hex[3]);\n\n    const hsvaColor: HsvaColor = { ...parseHex(withoutOpacity), a };\n    return hsvaColor;\n  }\n\n  const withoutOpacity = hex.slice(0, 6);\n  const a = roundA(hex.slice(6, 8));\n  const hsvaColor: HsvaColor = { ...parseHex(withoutOpacity), a };\n  return hsvaColor;\n}\n\nconst RGB_REGEXP =\n  /rgba?\\(?\\s*(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n\nexport function parseRgba(color: string): HsvaColor {\n  const match = RGB_REGEXP.exec(color);\n\n  if (!match) {\n    return { h: 0, s: 0, v: 0, a: 1 };\n  }\n\n  return rgbaToHsva({\n    r: Number(match[1]) / (match[2] ? 100 / 255 : 1),\n    g: Number(match[3]) / (match[4] ? 100 / 255 : 1),\n    b: Number(match[5]) / (match[6] ? 100 / 255 : 1),\n    a: match[7] === undefined ? 1 : Number(match[7]) / (match[8] ? 100 : 1),\n  });\n}\n\nconst VALIDATION_REGEXP: Record<ColorFormat, RegExp> = {\n  hex: /^#?([0-9A-F]{3}){1,2}$/i,\n  hexa: /^#?([0-9A-F]{4}){1,2}$/i,\n  rgb: /^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/i,\n  rgba: /^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/i,\n  hsl: /hsl\\(\\s*(\\d+)\\s*,\\s*(\\d+(?:\\.\\d+)?%)\\s*,\\s*(\\d+(?:\\.\\d+)?%)\\)/i,\n  hsla: /^hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%,\\s*(\\d*(?:\\.\\d+)?)\\)$/i,\n};\n\nconst CONVERTERS: Record<ColorFormat, (color: string) => HsvaColor> = {\n  hex: parseHex,\n  hexa: parseHexa,\n  rgb: parseRgba,\n  rgba: parseRgba,\n  hsl: parseHsla,\n  hsla: parseHsla,\n};\n\nexport function isColorValid(color: string) {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const [, regexp] of Object.entries(VALIDATION_REGEXP)) {\n    if (regexp.test(color)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function parseColor(color: string): HsvaColor {\n  if (typeof color !== 'string') {\n    return { h: 0, s: 0, v: 0, a: 1 };\n  }\n\n  if (color === 'transparent') {\n    return { h: 0, s: 0, v: 0, a: 0 };\n  }\n\n  const trimmed = color.trim();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const [rule, regexp] of Object.entries(VALIDATION_REGEXP)) {\n    if (regexp.test(trimmed)) {\n      return CONVERTERS[rule](trimmed);\n    }\n  }\n\n  return { h: 0, s: 0, v: 0, a: 1 };\n}\n"]},"metadata":{},"sourceType":"module"}