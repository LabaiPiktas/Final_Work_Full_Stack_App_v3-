{"ast":null,"code":"import { useRef, useCallback, useEffect } from 'react';\nimport { FOCUS_SELECTOR, tabbable, focusable } from './tabbable.js';\nimport { scopeTab } from './scope-tab.js';\nimport { createAriaHider } from './create-aria-hider.js';\n\nfunction useFocusTrap() {\n  let active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  const ref = useRef();\n  const restoreAria = useRef(null);\n  const setRef = useCallback(node => {\n    if (!active) {\n      return;\n    }\n\n    if (node === null) {\n      if (restoreAria.current) {\n        restoreAria.current();\n        restoreAria.current = null;\n      }\n\n      return;\n    }\n\n    restoreAria.current = createAriaHider(node);\n\n    if (ref.current === node) {\n      return;\n    }\n\n    if (node) {\n      const processNode = () => {\n        let focusElement = node.querySelector(\"[data-autofocus]\");\n\n        if (!focusElement) {\n          const children = Array.from(node.querySelectorAll(FOCUS_SELECTOR));\n          focusElement = children.find(tabbable) || children.find(focusable) || null;\n          if (!focusElement && focusable(node)) focusElement = node;\n        }\n\n        if (focusElement) {\n          focusElement.focus({\n            preventScroll: true\n          });\n        } else if (process.env.NODE_ENV === \"development\") {\n          console.warn(\"[@mantine/hooks/use-focus-trap] Failed to find focusable element within provided node\", node);\n        }\n      };\n\n      setTimeout(() => {\n        if (node.getRootNode()) {\n          processNode();\n        } else if (process.env.NODE_ENV === \"development\") {\n          console.warn(\"[@mantine/hooks/use-focus-trap] Ref node is not part of the dom\", node);\n        }\n      });\n      ref.current = node;\n    } else {\n      ref.current = null;\n    }\n  }, [active]);\n  useEffect(() => {\n    if (!active) {\n      return void 0;\n    }\n\n    const handleKeyDown = event => {\n      if (event.key === \"Tab\" && ref.current) {\n        scopeTab(ref.current, event);\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n\n      if (restoreAria.current) {\n        restoreAria.current();\n      }\n    };\n  }, [active]);\n  return setRef;\n}\n\nexport { useFocusTrap };","map":{"version":3,"mappings":";;;;;AAIO,SAASA,YAAT,GAAqC;EAAA,IAAfC,MAAe,uEAAN,IAAM;EAC1C,MAAMC,GAAG,GAAGC,MAAM,EAAlB;EACA,MAAMC,WAAW,GAAGD,MAAM,CAAC,IAAD,CAA1B;EACA,MAAME,MAAM,GAAGC,WAAW,CAAEC,IAAD,IAAU;IACnC,IAAI,CAACN,MAAL,EAAa;MACX;IACD;;IACD,IAAIM,IAAI,KAAK,IAAb,EAAmB;MACjB,IAAIH,WAAW,CAACI,OAAhB,EAAyB;QACvBJ,WAAW,CAACI,OAAZ;QACAJ,WAAW,CAACI,OAAZ,GAAsB,IAAtB;MACD;;MACD;IACD;;IACDJ,WAAW,CAACI,OAAZ,GAAsBC,eAAe,CAACF,IAAD,CAArC;;IACA,IAAIL,GAAG,CAACM,OAAJ,KAAgBD,IAApB,EAA0B;MACxB;IACD;;IACD,IAAIA,IAAJ,EAAU;MACR,MAAMG,WAAW,GAAG,MAAM;QACxB,IAAIC,YAAY,GAAGJ,IAAI,CAACK,aAAL,CAAmB,kBAAnB,CAAnB;;QACA,IAAI,CAACD,YAAL,EAAmB;UACjB,MAAME,QAAQ,GAAGC,KAAK,CAACC,IAAN,CAAWR,IAAI,CAACS,gBAAL,CAAsBC,cAAtB,CAAX,CAAjB;UACAN,YAAY,GAAGE,QAAQ,CAACK,IAAT,CAAcC,QAAd,KAA2BN,QAAQ,CAACK,IAAT,CAAcE,SAAd,CAA3B,IAAuD,IAAtE;UACA,IAAI,CAACT,YAAD,IAAiBS,SAAS,CAACb,IAAD,CAA9B,EACEI,YAAY,GAAGJ,IAAf;QACH;;QACD,IAAII,YAAJ,EAAkB;UAChBA,YAAY,CAACU,KAAb,CAAmB;YAAEC,aAAa,EAAE;UAAjB,CAAnB;QACD,CAFD,MAEO,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;UACjDC,OAAO,CAACC,IAAR,CAAa,uFAAb,EAAsGpB,IAAtG;QACD;MACF,CAbD;;MAcAqB,UAAU,CAAC,MAAM;QACf,IAAIrB,IAAI,CAACsB,WAAL,EAAJ,EAAwB;UACtBnB,WAAW;QACZ,CAFD,MAEO,IAAIa,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;UACjDC,OAAO,CAACC,IAAR,CAAa,iEAAb,EAAgFpB,IAAhF;QACD;MACF,CANS,CAAV;MAOAL,GAAG,CAACM,OAAJ,GAAcD,IAAd;IACD,CAvBD,MAuBO;MACLL,GAAG,CAACM,OAAJ,GAAc,IAAd;IACD;EACF,CAzCyB,EAyCvB,CAACP,MAAD,CAzCuB,CAA1B;EA0CA6B,SAAS,CAAC,MAAM;IACd,IAAI,CAAC7B,MAAL,EAAa;MACX,OAAO,KAAK,CAAZ;IACD;;IACD,MAAM8B,aAAa,GAAIC,KAAD,IAAW;MAC/B,IAAIA,KAAK,CAACC,GAAN,KAAc,KAAd,IAAuB/B,GAAG,CAACM,OAA/B,EAAwC;QACtC0B,QAAQ,CAAChC,GAAG,CAACM,OAAL,EAAcwB,KAAd,CAAR;MACD;IACF,CAJD;;IAKAG,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCL,aAArC;IACA,OAAO,MAAM;MACXI,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCN,aAAxC;;MACA,IAAI3B,WAAW,CAACI,OAAhB,EAAyB;QACvBJ,WAAW,CAACI,OAAZ;MACD;IACF,CALD;EAMD,CAhBQ,EAgBN,CAACP,MAAD,CAhBM,CAAT;EAiBA,OAAOI,MAAP;AACF","names":["useFocusTrap","active","ref","useRef","restoreAria","setRef","useCallback","node","current","createAriaHider","processNode","focusElement","querySelector","children","Array","from","querySelectorAll","FOCUS_SELECTOR","find","tabbable","focusable","focus","preventScroll","process","env","NODE_ENV","console","warn","setTimeout","getRootNode","useEffect","handleKeyDown","event","key","scopeTab","document","addEventListener","removeEventListener"],"sources":["D:\\forum-system-with-react-novu-node\\client\\node_modules\\@mantine\\hooks\\src\\use-focus-trap\\use-focus-trap.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { FOCUS_SELECTOR, focusable, tabbable } from './tabbable';\nimport { scopeTab } from './scope-tab';\nimport { createAriaHider } from './create-aria-hider';\n\nexport function useFocusTrap(active = true): (instance: HTMLElement | null) => void {\n  const ref = useRef<HTMLElement | null>();\n  const restoreAria = useRef<Function | null>(null);\n\n  const setRef = useCallback(\n    (node: HTMLElement | null) => {\n      if (!active) {\n        return;\n      }\n\n      if (node === null) {\n        if (restoreAria.current) {\n          restoreAria.current();\n          restoreAria.current = null;\n        }\n        return;\n      }\n\n      restoreAria.current = createAriaHider(node);\n      if (ref.current === node) {\n        return;\n      }\n\n      if (node) {\n        const processNode = () => {\n          let focusElement: HTMLElement = node.querySelector('[data-autofocus]');\n\n          if (!focusElement) {\n            const children = Array.from<HTMLElement>(node.querySelectorAll(FOCUS_SELECTOR));\n            focusElement = children.find(tabbable) || children.find(focusable) || null;\n            if (!focusElement && focusable(node)) focusElement = node;\n          }\n\n          if (focusElement) {\n            focusElement.focus({ preventScroll: true });\n          } else if (process.env.NODE_ENV === 'development') {\n            // eslint-disable-next-line no-console\n            console.warn(\n              '[@mantine/hooks/use-focus-trap] Failed to find focusable element within provided node',\n              node\n            );\n          }\n        };\n\n        // Delay processing the HTML node by a frame. This ensures focus is assigned correctly.\n        setTimeout(() => {\n          if (node.getRootNode()) {\n            processNode();\n          } else if (process.env.NODE_ENV === 'development') {\n            // eslint-disable-next-line no-console\n            console.warn('[@mantine/hooks/use-focus-trap] Ref node is not part of the dom', node);\n          }\n        });\n\n        ref.current = node;\n      } else {\n        ref.current = null;\n      }\n    },\n    [active]\n  );\n\n  useEffect(() => {\n    if (!active) {\n      return undefined;\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Tab' && ref.current) {\n        scopeTab(ref.current, event);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n\n      if (restoreAria.current) {\n        restoreAria.current();\n      }\n    };\n  }, [active]);\n\n  return setRef;\n}\n"]},"metadata":{},"sourceType":"module"}