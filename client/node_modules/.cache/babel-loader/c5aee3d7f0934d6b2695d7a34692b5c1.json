{"ast":null,"code":"import React from 'react';\nimport { getSafeId } from '@mantine/utils';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { AccordionContextProvider } from './Accordion.context.js';\nimport { ACCORDION_ERRORS } from './Accordion.errors.js';\n\nfunction AccordionProvider(_ref) {\n  let {\n    children,\n    multiple,\n    value,\n    defaultValue,\n    onChange,\n    id,\n    loop,\n    transitionDuration,\n    disableChevronRotation,\n    chevronPosition,\n    chevronSize,\n    order,\n    chevron,\n    variant,\n    radius,\n    classNames,\n    styles,\n    unstyled\n  } = _ref;\n  const uid = useId(id);\n  const [_value, handleChange] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: multiple ? [] : null,\n    onChange\n  });\n\n  const isItemActive = itemValue => Array.isArray(_value) ? _value.includes(itemValue) : itemValue === _value;\n\n  const handleItemChange = itemValue => {\n    const nextValue = Array.isArray(_value) ? _value.includes(itemValue) ? _value.filter(selectedValue => selectedValue !== itemValue) : [..._value, itemValue] : itemValue === _value ? null : itemValue;\n    handleChange(nextValue);\n  };\n\n  return /* @__PURE__ */React.createElement(AccordionContextProvider, {\n    value: {\n      isItemActive,\n      onChange: handleItemChange,\n      getControlId: getSafeId(`${uid}-control`, ACCORDION_ERRORS.value),\n      getRegionId: getSafeId(`${uid}-panel`, ACCORDION_ERRORS.value),\n      transitionDuration,\n      disableChevronRotation,\n      chevronPosition,\n      chevronSize,\n      order,\n      chevron,\n      loop,\n      variant,\n      radius,\n      classNames,\n      styles,\n      unstyled\n    }\n  }, children);\n}\n\nexport { AccordionProvider };","map":{"version":3,"mappings":";;;;;;AAKO,SAASA,iBAAT,OAmBJ;EAAA,IAnB+B;IAChCC,QADgC;IAEhCC,QAFgC;IAGhCC,KAHgC;IAIhCC,YAJgC;IAKhCC,QALgC;IAMhCC,EANgC;IAOhCC,IAPgC;IAQhCC,kBARgC;IAShCC,sBATgC;IAUhCC,eAVgC;IAWhCC,WAXgC;IAYhCC,KAZgC;IAahCC,OAbgC;IAchCC,OAdgC;IAehCC,MAfgC;IAgBhCC,UAhBgC;IAiBhCC,MAjBgC;IAkBhCC;EAlBgC,CAmB/B;EACD,MAAMC,GAAG,GAAGC,KAAK,CAACd,EAAD,CAAjB;EACA,MAAM,CAACe,MAAD,EAASC,YAAT,IAAyBC,eAAe,CAAC;IAC7CpB,KAD6C;IAE7CC,YAF6C;IAG7CoB,UAAU,EAAEtB,QAAQ,GAAG,EAAH,GAAQ,IAHiB;IAI7CG;EAJ6C,CAAD,CAA9C;;EAMA,MAAMoB,YAAY,GAAIC,SAAD,IAAeC,KAAK,CAACC,OAAN,CAAcP,MAAd,IAAwBA,MAAM,CAACQ,QAAP,CAAgBH,SAAhB,CAAxB,GAAqDA,SAAS,KAAKL,MAAvG;;EACA,MAAMS,gBAAgB,GAAIJ,SAAD,IAAe;IACtC,MAAMK,SAAS,GAAGJ,KAAK,CAACC,OAAN,CAAcP,MAAd,IAAwBA,MAAM,CAACQ,QAAP,CAAgBH,SAAhB,IAA6BL,MAAM,CAACW,MAAP,CAAeC,aAAD,IAAmBA,aAAa,KAAKP,SAAnD,CAA7B,GAA6F,CAAC,GAAGL,MAAJ,EAAYK,SAAZ,CAArH,GAA8IA,SAAS,KAAKL,MAAd,GAAuB,IAAvB,GAA8BK,SAA9L;IACAJ,YAAY,CAACS,SAAD,CAAZ;EACD,CAHD;;EAIA,sBAAuBG,KAAK,CAACC,aAAN,CAAoBC,wBAApB,EAA8C;IACnEjC,KAAK,EAAE;MACLsB,YADK;MAELpB,QAAQ,EAAEyB,gBAFL;MAGLO,YAAY,EAAEC,SAAS,CAAE,GAAEnB,GAAI,UAAR,EAAmBoB,gBAAgB,CAACpC,KAApC,CAHlB;MAILqC,WAAW,EAAEF,SAAS,CAAE,GAAEnB,GAAI,QAAR,EAAiBoB,gBAAgB,CAACpC,KAAlC,CAJjB;MAKLK,kBALK;MAMLC,sBANK;MAOLC,eAPK;MAQLC,WARK;MASLC,KATK;MAULC,OAVK;MAWLN,IAXK;MAYLO,OAZK;MAaLC,MAbK;MAcLC,UAdK;MAeLC,MAfK;MAgBLC;IAhBK;EAD4D,CAA9C,EAmBpBjB,QAnBoB,CAAvB;AAoBF","names":["AccordionProvider","children","multiple","value","defaultValue","onChange","id","loop","transitionDuration","disableChevronRotation","chevronPosition","chevronSize","order","chevron","variant","radius","classNames","styles","unstyled","uid","useId","_value","handleChange","useUncontrolled","finalValue","isItemActive","itemValue","Array","isArray","includes","handleItemChange","nextValue","filter","selectedValue","React","createElement","AccordionContextProvider","getControlId","getSafeId","ACCORDION_ERRORS","getRegionId"],"sources":["D:\\forum-system-with-react-novu-node\\client\\node_modules\\@mantine\\core\\src\\Accordion\\AccordionProvider.tsx"],"sourcesContent":["import React from 'react';\nimport { getSafeId } from '@mantine/utils';\nimport { useUncontrolled, useId } from '@mantine/hooks';\nimport { MantineNumberSize, ClassNames, Styles } from '@mantine/styles';\nimport { AccordionContextProvider } from './Accordion.context';\nimport {\n  AccordionValue,\n  AccordionChevronPosition,\n  AccordionHeadingOrder,\n  AccordionVariant,\n} from './Accordion.types';\nimport { ACCORDION_ERRORS } from './Accordion.errors';\nimport type { AccordionStylesNames } from './Accordion';\n\nexport interface AccordionProviderProps<Multiple extends boolean = false> {\n  /** Base id, used to generate ids that connect labels with controls, by default generated randomly */\n  id?: string;\n\n  /** Determines whether arrow key presses should loop though items (first to last and last to first) */\n  loop?: boolean;\n\n  /** Accordion content */\n  children: React.ReactNode;\n\n  /** Determines whether multiple items can be opened at a time */\n  multiple?: Multiple;\n\n  /** Value for controlled component */\n  value?: AccordionValue<Multiple>;\n\n  /** Default value for uncontrolled component */\n  defaultValue?: AccordionValue<Multiple>;\n\n  /** Callback for controlled component */\n  onChange?(value: AccordionValue<Multiple>): void;\n\n  /** Transition duration in ms, set 0 to disable transitions */\n  transitionDuration?: number;\n\n  /** Determines whether chevron rotation should be disabled */\n  disableChevronRotation?: boolean;\n\n  /** Determines position of the chevron */\n  chevronPosition?: AccordionChevronPosition;\n\n  /** Chevron size in px */\n  chevronSize?: number;\n\n  /** Heading order, has no effect on visuals */\n  order?: AccordionHeadingOrder;\n\n  /** Replaces chevron on all items */\n  chevron?: React.ReactNode;\n\n  /** Controls visuals */\n  variant?: AccordionVariant;\n\n  /** border-radius from theme.radius or number to set value in px, will not be applied to default variant  */\n  radius?: MantineNumberSize;\n}\n\ninterface _AccordionProviderProps<Multiple extends boolean = false>\n  extends AccordionProviderProps<Multiple> {\n  classNames?: ClassNames<AccordionStylesNames>;\n  styles?: Styles<AccordionStylesNames>;\n  unstyled?: boolean;\n}\n\nexport function AccordionProvider<Multiple extends boolean = false>({\n  children,\n  multiple,\n  value,\n  defaultValue,\n  onChange,\n  id,\n  loop,\n  transitionDuration,\n  disableChevronRotation,\n  chevronPosition,\n  chevronSize,\n  order,\n  chevron,\n  variant,\n  radius,\n  classNames,\n  styles,\n  unstyled,\n}: _AccordionProviderProps<Multiple>) {\n  const uid = useId(id);\n  const [_value, handleChange] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: multiple ? ([] as any) : null,\n    onChange,\n  });\n\n  const isItemActive = (itemValue: string) =>\n    Array.isArray(_value) ? _value.includes(itemValue) : itemValue === _value;\n\n  const handleItemChange = (itemValue: string) => {\n    const nextValue: AccordionValue<Multiple> = Array.isArray(_value)\n      ? _value.includes(itemValue)\n        ? _value.filter((selectedValue) => selectedValue !== itemValue)\n        : [..._value, itemValue]\n      : itemValue === _value\n      ? null\n      : (itemValue as any);\n\n    handleChange(nextValue);\n  };\n\n  return (\n    <AccordionContextProvider\n      value={{\n        isItemActive,\n        onChange: handleItemChange,\n        getControlId: getSafeId(`${uid}-control`, ACCORDION_ERRORS.value),\n        getRegionId: getSafeId(`${uid}-panel`, ACCORDION_ERRORS.value),\n        transitionDuration,\n        disableChevronRotation,\n        chevronPosition,\n        chevronSize,\n        order,\n        chevron,\n        loop,\n        variant,\n        radius,\n        classNames,\n        styles,\n        unstyled,\n      }}\n    >\n      {children}\n    </AccordionContextProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}