import { ButtonTypeEnum, MessageActionStatusEnum } from '@novu/shared';
import type { IMessage } from '@novu/shared';
import type { IStoreQuery } from '@novu/client';
interface IUseNotificationsProps {
    storeId?: string;
}
export declare function useNotifications(props?: IUseNotificationsProps): IUseNotifications;
export interface IUseNotifications {
    notifications: IMessage[];
    fetchNextPage: () => void;
    hasNextPage: boolean;
    fetching: boolean;
    markAsRead?: (messageId: string) => void;
    markAllAsRead: () => Promise<number>;
    updateAction: (messageId: string, actionButtonType: ButtonTypeEnum, status: MessageActionStatusEnum, payload?: Record<string, unknown>) => Promise<void>;
    refetch: (query?: IStoreQuery) => void;
    markAsSeen: (messageId?: string, readExist?: boolean, messages?: IMessage | IMessage[]) => void;
    onWidgetClose: () => void;
    onTabChange: () => void;
}
export {};
//# sourceMappingURL=use-notifications.hook.d.ts.map