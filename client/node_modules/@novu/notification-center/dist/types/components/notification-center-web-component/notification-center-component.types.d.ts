import type { INovuProviderProps } from '../novu-provider';
import type { IPopoverNotificationCenterProps } from '../popover-notification-center';
import type { ColorScheme } from '../../shared/config/colors';
import type { INotificationCenterStyles } from '../../store/styles';
declare type SelectedProviderProps = Pick<INovuProviderProps, 'onLoad' | 'stores' | 'backendUrl' | 'socketUrl' | 'subscriberId' | 'applicationIdentifier' | 'subscriberHash' | 'i18n'>;
declare type NovuProviderProps = SelectedProviderProps & {
    sessionLoaded?: INovuProviderProps['onLoad'];
};
interface PopoverAdditionalProps {
    notificationClicked?: IPopoverNotificationCenterProps['onNotificationClick'];
    unseenCountChanged?: IPopoverNotificationCenterProps['onUnseenCountChanged'];
    actionClicked?: IPopoverNotificationCenterProps['onActionClick'];
    tabClicked?: IPopoverNotificationCenterProps['onTabClick'];
}
declare type SelectedPopoverProps = Pick<IPopoverNotificationCenterProps, 'onUnseenCountChanged' | 'onActionClick' | 'onTabClick' | 'theme' | 'tabs' | 'showUserPreferences'> & {
    popover?: {
        offset?: IPopoverNotificationCenterProps['offset'];
        position?: IPopoverNotificationCenterProps['position'];
    };
};
declare type PopoverProps = SelectedPopoverProps & {
    onNotificationClick?: IPopoverNotificationCenterProps['onNotificationClick'];
    colorScheme?: ColorScheme;
} & PopoverAdditionalProps;
declare type BellProps = {
    unseenBadgeColor?: string;
    unseenBadgeBackgroundColor?: string;
};
export declare type PopoverWrapperProps = PopoverProps & BellProps;
export declare type NotificationCenterComponentProps = NovuProviderProps & PopoverWrapperProps & {
    styles?: INotificationCenterStyles;
};
export {};
//# sourceMappingURL=notification-center-component.types.d.ts.map